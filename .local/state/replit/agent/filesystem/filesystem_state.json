{"file_contents":{"replit.md":{"content":"# Veriscope - Media Literacy Games\n\n## Overview\n\nVeriscope is an interactive web application designed to teach media literacy through four engaging mini-games. The platform helps users develop critical thinking skills for evaluating digital information, identifying misinformation, and understanding information bias. Each game focuses on a different aspect of media literacy: rumor verification, filter bubbles, digital evidence assessment, and echo chamber awareness.\n\nThe application features a progressive game hub where users complete challenges, track their progress, and earn achievements. Each mini-game uses AI-powered analysis combined with pre-written fallback stories to evaluate user choices and provide educational feedback through flashcards.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Single Page Application (SPA)**: Built with vanilla JavaScript using a screen-based navigation system\n- **Modular Game Structure**: Each mini-game is implemented as a separate class with its own UI themes and mechanics\n- **CSS Theming System**: Game-specific visual themes (cartoonish town, surreal bubbles, noir detective, modern techno)\n- **Progressive Web App Ready**: Responsive design with mobile-first approach\n\n### Audio System\n- **Web Audio API Integration**: Synthetic audio generation as fallback when audio files unavailable\n- **Audio Manager**: Centralized system managing background music and sound effects with user controls\n- **Placeholder Audio Structure**: Ready for royalty-free audio file integration from sources like Pixabay and Freesound\n\n### Game Logic Architecture\n- **AI-First Approach**: Primary analysis using Hugging Face models for sentiment analysis, fake news detection, and credibility assessment\n- **Fallback Story System**: Comprehensive pre-written scenarios (10+ per game) when AI analysis fails or is unavailable\n- **Progress Tracking**: Persistent user progress, scores, achievements, and statistics across all games\n- **Educational Feedback**: Each game concludes with \"Flashcard of Learnings\" explaining media literacy concepts\n\n### Data Management\n- **Local Storage**: Client-side persistence for user progress, preferences, and game statistics\n- **Fallback Stories Database**: Structured JavaScript objects containing educational scenarios with explanations\n- **Achievement System**: Unlockable achievements based on performance and completion milestones\n\n### Game Components\n1. **RumorVille**: Town-themed rumor verification with share/verify/ignore mechanics\n2. **Filter Bubble Simulator**: Abstract bubble interface demonstrating information filtering effects\n3. **Digital Detective**: Noir-styled evidence evaluation game with trust/investigate/dismiss options\n4. **Echo Chamber Escape**: Chatroom simulation focusing on bias detection and engagement choices\n\n## External Dependencies\n\n### AI Services\n- **Hugging Face Inference API**: Primary AI analysis using models for sentiment analysis, toxicity detection, and fake news identification\n- **Fallback AI**: Web Audio API for synthetic sound generation when external audio unavailable\n\n### Content Resources\n- **Font Awesome**: Icon library for UI elements and game themes\n- **Royalty-Free Audio Sources**: Pixabay Music, Freesound.org, and Adobe Audio for background music and sound effects\n\n### Browser APIs\n- **Web Audio API**: Real-time audio synthesis and playback management\n- **Local Storage API**: Client-side data persistence for progress tracking\n- **Fetch API**: HTTP requests to Hugging Face models for AI analysis\n\n### Development Dependencies\n- **Vanilla JavaScript**: No framework dependencies for maximum compatibility\n- **CSS3**: Modern styling with gradients, animations, and responsive design\n- **HTML5**: Semantic markup with accessibility considerations\n\nThe application is designed to function fully offline with synthetic audio and fallback stories, while providing enhanced experiences when external AI services and audio assets are available.","size_bytes":4059},"data/fallback-stories.js":{"content":"// Fallback Stories for all Veriscope games\n// These stories are used when AI analysis fails or is unavailable\n\nconst FALLBACK_STORIES = {\n    rumorville: [\n        {\n            text: \"BREAKING: Aliens spotted landing in Town Square at midnight! Multiple witnesses confirm seeing strange lights and unusual beings!\",\n            isTrue: false,\n            explanation: \"This is a classic example of sensationalized fake news. No credible sources, official statements, or physical evidence support alien landings. Always verify extraordinary claims with reliable sources.\"\n        },\n        {\n            text: \"Mayor announces new free health clinic opening next month to serve all residents regardless of insurance status.\",\n            isTrue: true,\n            explanation: \"This appears to be legitimate local government news. Health clinic announcements are typically verified through official city websites, press releases, or local news outlets.\"\n        },\n        {\n            text: \"Scientists discover chocolate can cure all diseases! Eat 10 bars daily for perfect health, doctors hate this one trick!\",\n            isTrue: false,\n            explanation: \"This is clearly misinformation. The sensational language ('cure ALL diseases', 'doctors hate this trick') are red flags. No single food can cure all diseases, and credible health advice comes from medical professionals.\"\n        },\n        {\n            text: \"Local elementary school announces annual science fair next Friday, encouraging student participation in STEM projects.\",\n            isTrue: true,\n            explanation: \"School announcements about educational events are typically factual and can be verified through school websites, newsletters, or official communications to parents.\"\n        },\n        {\n            text: \"GOVERNMENT COVER-UP: Secret documents reveal dragon sightings hidden from public for decades!\",\n            isTrue: false,\n            explanation: \"Conspiracy theories often use dramatic language like 'COVER-UP' and make extraordinary claims without credible evidence. Dragons are mythical creatures, and such claims require extraordinary proof.\"\n        },\n        {\n            text: \"Weekly farmers' market returns to Main Street this Sunday from 9 AM to 2 PM, featuring local produce and crafts.\",\n            isTrue: true,\n            explanation: \"Community event announcements are usually straightforward and factual. Farmers' markets are common public events that can be verified through local government or community organization websites.\"\n        },\n        {\n            text: \"URGENT: Click this link now for miracle diet that melts fat overnight! Doctors are shocked by these results!\",\n            isTrue: false,\n            explanation: \"This is a classic clickbait scam. Red flags include urgent language, unrealistic promises ('overnight' results), and pressure tactics. Legitimate health information doesn't use such manipulative language.\"\n        },\n        {\n            text: \"Town library adds 500 new books to children's section, expanding educational resources for young readers.\",\n            isTrue: true,\n            explanation: \"Library announcements about new acquisitions are typically factual institutional communications that can be verified by contacting the library directly.\"\n        },\n        {\n            text: \"WARNING: New computer virus spreads through Wi-Fi signals, can infect devices just by being near infected networks!\",\n            isTrue: false,\n            explanation: \"This is technologically impossible misinformation. While Wi-Fi networks can be compromised, viruses don't 'spread through signals' to just any nearby device. This misunderstands how computer security works.\"\n        },\n        {\n            text: \"High school robotics team wins regional championship, advances to state-level competition next month.\",\n            isTrue: true,\n            explanation: \"School achievement announcements are typically factual and can be verified through school websites, local news coverage, or official school district communications.\"\n        }\n    ],\n\n    filterbubble: [\n        {\n            text: \"Local farmer markets are struggling and many are closing due to decreased customer traffic\",\n            sentiment: \"Negative\",\n            explanation: \"This presents economic challenges in the community with a negative sentiment about local businesses.\"\n        },\n        {\n            text: \"Community volunteers come together to build new playground for neighborhood children\",\n            sentiment: \"Positive\", \n            explanation: \"This highlights positive community engagement and collaborative efforts to improve local facilities.\"\n        },\n        {\n            text: \"Major tech companies report quarterly earnings with mixed results across different sectors\",\n            sentiment: \"Neutral\",\n            explanation: \"Business news presenting factual information about corporate performance without strong emotional direction.\"\n        },\n        {\n            text: \"Unemployment rates reach historic low as new job opportunities emerge in green energy sector\",\n            sentiment: \"Positive\",\n            explanation: \"Economic good news highlighting positive employment trends and emerging industry opportunities.\"\n        },\n        {\n            text: \"Severe drought conditions reported in neighboring regions affecting agricultural production\",\n            sentiment: \"Negative\",\n            explanation: \"Environmental challenges that impact communities and local economy with concerning implications.\"\n        },\n        {\n            text: \"Annual arts festival attracts thousands of visitors, boosting local tourism and business revenue\",\n            sentiment: \"Positive\", \n            explanation: \"Cultural events creating positive economic impact and community engagement.\"\n        },\n        {\n            text: \"Government announces new tax regulations affecting small business operations starting next year\",\n            sentiment: \"Negative\",\n            explanation: \"Policy changes that may create challenges or concerns for small business owners.\"\n        },\n        {\n            text: \"Local tech startup secures funding to create 200 new jobs in the downtown area\",\n            sentiment: \"Positive\",\n            explanation: \"Economic development news highlighting job creation and local business growth.\"\n        },\n        {\n            text: \"Housing prices continue to rise making homeownership challenging for first-time buyers\",\n            sentiment: \"Negative\", \n            explanation: \"Economic challenges affecting housing accessibility and affordability concerns.\"\n        },\n        {\n            text: \"City council approves expansion of public transportation system to better serve residents\",\n            sentiment: \"Positive\",\n            explanation: \"Infrastructure improvements that benefit community mobility and public service access.\"\n        }\n    ],\n\n    digitaldetective: [\n        {\n            text: \"BREAKING: Revolutionary miracle cure discovered by unknown scientists! This breakthrough will change medicine forever! Click here to learn the secret Big Pharma doesn't want you to know!\",\n            isCredible: false,\n            explanation: \"Multiple red flags indicate this is not credible: sensational language ('miracle cure'), anonymous sources ('unknown scientists'), conspiracy claims ('Big Pharma doesn't want you to know'), and clickbait format. Legitimate medical breakthroughs are published in peer-reviewed journals with named researchers.\"\n        },\n        {\n            text: \"World Health Organization releases comprehensive report on pandemic preparedness, outlining updated protocols based on recent global health challenges and scientific evidence.\",\n            isCredible: true,\n            explanation: \"This appears credible: WHO is an authoritative source for global health information, mentions specific content (pandemic preparedness protocols), and references scientific evidence. Can be verified through official WHO website and publications.\"\n        },\n        {\n            text: \"Celebrity endorses amazing new weight loss supplement that helped them lose 50 pounds in just 2 weeks! No diet or exercise needed! Order now!\",\n            isCredible: false,\n            explanation: \"This is not credible health information: unrealistic claims (50 pounds in 2 weeks is dangerous), celebrity endorsement doesn't equal scientific validity, promotes unhealthy practices (no diet/exercise), and uses commercial pressure tactics.\"\n        },\n        {\n            text: \"NASA announces findings from Mars rover mission, publishing detailed analysis of soil samples and geological data in collaboration with international space agencies.\",\n            isCredible: true,\n            explanation: \"NASA is a credible scientific authority, the content is specific (Mars rover, soil samples, geological data), mentions collaboration with other agencies, and would be published through official NASA channels and scientific journals.\"\n        },\n        {\n            text: \"You won't believe this shocking news about your favorite foods! Doctors are stunned by what they found! Number 7 will amaze you!\",\n            isCredible: false,\n            explanation: \"Classic clickbait format with emotional manipulation ('shocking', 'stunned', 'won't believe'), lacks specific information, uses numbered list format typical of low-quality content farms, and provides no source attribution.\"\n        },\n        {\n            text: \"University research team publishes peer-reviewed study on climate change impacts, with findings published in the Journal of Environmental Science after extensive review process.\",\n            isCredible: true,\n            explanation: \"Strong credibility indicators: university research (institutional backing), peer-review process (quality control), specific journal citation (verifiable), and mentions review process. Academic research follows rigorous standards for publication.\"\n        },\n        {\n            text: \"Forward this message to 10 friends to receive free gift cards worth $500! This offer expires in 24 hours and is only available to selected users!\",\n            isCredible: false,\n            explanation: \"This is a classic chain message scam. Red flags include: unrealistic free offers, pressure tactics (24-hour expiration), requires forwarding to others (viral scam mechanism), and lacks legitimate business contact information.\"\n        },\n        {\n            text: \"Department of Health issues public advisory on seasonal flu prevention, recommending vaccination and providing guidance on symptoms and treatment options.\",\n            isCredible: true,\n            explanation: \"Government health departments are authoritative sources for public health information, the content is appropriate for their mandate (flu prevention), and provides practical health guidance that can be verified through official health department websites.\"\n        },\n        {\n            text: \"Secret blog reveals the truth about vaccines causing mind control! Government conspiracy exposed by insider whistleblower! Share before it's deleted!\",\n            isCredible: false,\n            explanation: \"This promotes dangerous health misinformation with conspiracy theory elements: anonymous 'insider' source, extraordinary claims without evidence (mind control), fear tactics ('share before deleted'), and contradicts established medical science.\"\n        },\n        {\n            text: \"International panel of climate scientists releases peer-reviewed assessment of global temperature trends, published in Nature Climate Change with data from multiple research institutions.\",\n            isCredible: true,\n            explanation: \"High credibility: international scientific collaboration, peer-review process, publication in prestigious journal (Nature), multiple institutional backing, and specific data focus. This follows standard scientific publication protocols.\"\n        }\n    ],\n\n    echochamber: [\n        {\n            text: \"Everyone who disagrees with our position is clearly ignorant and hasn't done any real research on this topic!\",\n            biasLevel: \"biased\",\n            biasType: \"ad hominem\",\n            explanation: \"This statement shows strong bias by dismissing all opposing views as 'ignorant' without engaging with their actual arguments. It uses ad hominem attacks rather than addressing the substance of different perspectives.\"\n        },\n        {\n            text: \"This is a complex issue with valid points on multiple sides. Maybe we should consider different perspectives before reaching conclusions.\",\n            biasLevel: \"balanced\",\n            biasType: \"nuanced thinking\",\n            explanation: \"This statement demonstrates balanced thinking by acknowledging complexity, recognizing multiple valid perspectives, and advocating for careful consideration rather than quick judgments.\"\n        },\n        {\n            text: \"Our group is always right about everything, while those other people constantly spread lies and misinformation!\",\n            biasLevel: \"biased\", \n            biasType: \"in-group favoritism\",\n            explanation: \"This shows extreme in-group bias by claiming their group is 'always right' while demonizing others as liars. It reflects tribal thinking that prevents objective evaluation of ideas.\"\n        },\n        {\n            text: \"Recent scientific studies suggest the outcomes are mixed, with some evidence supporting different conclusions depending on various factors.\",\n            biasLevel: \"balanced\",\n            biasType: \"evidence-based\",\n            explanation: \"This statement shows balanced reasoning by referencing scientific evidence, acknowledging mixed results, and recognizing that conclusions may vary based on different factors and contexts.\"\n        },\n        {\n            text: \"If you don't agree with us, you're obviously brainwashed by mainstream media and can't think for yourself!\",\n            biasLevel: \"biased\",\n            biasType: \"conspiracy thinking\",\n            explanation: \"This demonstrates bias through conspiracy thinking and personal attacks. Instead of engaging with opposing arguments, it dismisses disagreement as 'brainwashing' and questions others' mental autonomy.\"\n        },\n        {\n            text: \"It's a complicated situation where reasonable people can examine the same evidence and reach different conclusions.\",\n            biasLevel: \"balanced\",\n            biasType: \"intellectual humility\", \n            explanation: \"This shows intellectual balance by acknowledging that complexity can lead to different interpretations, respecting others as 'reasonable people,' and recognizing that evidence can be interpreted differently.\"\n        },\n        {\n            text: \"Only complete fools would believe anything different from what we know to be true. There's no other rational explanation!\",\n            biasLevel: \"biased\",\n            biasType: \"absolute thinking\",\n            explanation: \"This exhibits bias through absolute thinking ('only fools', 'no other explanation') and intellectual arrogance. It refuses to consider alternative viewpoints and attacks the intelligence of those who disagree.\"\n        },\n        {\n            text: \"Experts across different fields are actively debating this issue, suggesting there are legitimate questions worth exploring further.\",\n            biasLevel: \"balanced\",\n            biasType: \"expert consultation\",\n            explanation: \"This demonstrates balanced thinking by acknowledging expert debate, recognizing legitimate questions exist, and showing openness to further exploration rather than claiming definitive answers.\"\n        },\n        {\n            text: \"Our side represents everything good and moral, while their side is completely evil and destructive to society!\",\n            biasLevel: \"biased\",\n            biasType: \"moral superiority\",\n            explanation: \"This shows extreme bias through moral polarization, painting their group as entirely good and others as entirely evil. This black-and-white thinking prevents understanding nuanced positions and common ground.\"\n        },\n        {\n            text: \"Nuance is important here because there are multiple stakeholders with different but understandable concerns and priorities.\",\n            biasLevel: \"balanced\",\n            biasType: \"stakeholder awareness\",\n            explanation: \"This reflects balanced thinking by emphasizing nuance, recognizing multiple stakeholders, and showing empathy for different concerns and priorities rather than dismissing opposing viewpoints.\"\n        }\n    ]\n};\n\n// Export the fallback stories for use in games\nwindow.FALLBACK_STORIES = FALLBACK_STORIES;\n","size_bytes":16889},"js/ai-integration.js":{"content":"// AI Integration System with Hugging Face and fallback support\nclass AIIntegration {\n    constructor() {\n        this.huggingFaceKey = this.getApiKey();\n        this.baseUrl = 'https://api-inference.huggingface.co/models';\n        this.models = {\n            sentiment: 'cardiffnlp/twitter-roberta-base-sentiment-latest',\n            fakeNews: 'martin-ha/toxic-comment-model',\n            credibility: 'unitary/toxic-bert',\n            bias: 'unitary/toxic-bert'\n        };\n        this.requestCount = 0;\n        this.maxRequests = 50; // Rate limiting\n    }\n    \n    getApiKey() {\n        // Try to get from window object or use fallback\n        return window?.HUGGING_FACE_API_KEY || \n               'hf_default_fallback_key';\n    }\n    \n    async makeHuggingFaceRequest(modelName, text) {\n        // Check rate limits\n        if (this.requestCount >= this.maxRequests) {\n            throw new Error('Rate limit exceeded');\n        }\n        \n        const url = `${this.baseUrl}/${modelName}`;\n        \n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.huggingFaceKey}`,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    inputs: text,\n                    options: {\n                        wait_for_model: false,\n                        use_cache: true\n                    }\n                })\n            });\n            \n            this.requestCount++;\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const result = await response.json();\n            \n            // Handle loading state\n            if (result.error && result.error.includes('loading')) {\n                throw new Error('Model loading');\n            }\n            \n            return result;\n        } catch (error) {\n            console.warn(`Hugging Face request failed: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    // Analyze sentiment for Filter Bubble game\n    async analyzeSentiment(text) {\n        try {\n            const result = await this.makeHuggingFaceRequest(this.models.sentiment, text);\n            \n            if (result && result.length > 0) {\n                const prediction = result[0];\n                const sentiment = prediction.label;\n                const confidence = prediction.score;\n                \n                return {\n                    sentiment: sentiment.charAt(0).toUpperCase() + sentiment.slice(1).toLowerCase(),\n                    confidence: confidence,\n                    reasoning: `AI analysis detected ${sentiment.toLowerCase()} sentiment with ${Math.round(confidence * 100)}% confidence.`\n                };\n            }\n            \n            throw new Error('Invalid AI response');\n        } catch (error) {\n            console.log('AI sentiment analysis failed, will use fallback');\n            throw error;\n        }\n    }\n    \n    // Analyze fake news for RumorVille game\n    async analyzeFakeNews(text) {\n        try {\n            // Use toxicity detection as a proxy for suspicious content\n            const result = await this.makeHuggingFaceRequest(this.models.fakeNews, text);\n            \n            if (result && result.length > 0) {\n                const prediction = result[0];\n                const toxicScore = prediction.score;\n                \n                // Heuristic: highly toxic content is more likely to be misinformation\n                const suspicionLevel = toxicScore;\n                const isCredible = suspicionLevel < 0.3;\n                \n                return {\n                    isCredible: isCredible,\n                    confidence: Math.abs(1 - suspicionLevel),\n                    reasoning: `AI analysis ${isCredible ? 'found no major red flags' : 'detected suspicious patterns'} in this content.`\n                };\n            }\n            \n            throw new Error('Invalid AI response');\n        } catch (error) {\n            console.log('AI fake news analysis failed, will use fallback');\n            throw error;\n        }\n    }\n    \n    // Analyze credibility for Digital Detective game\n    async analyzeCredibility(text) {\n        try {\n            const result = await this.makeHuggingFaceRequest(this.models.credibility, text);\n            \n            if (result && result.length > 0) {\n                const prediction = result[0];\n                const toxicScore = prediction.score;\n                \n                // Heuristic: less toxic content from better sources tends to be more credible\n                const credibilityScore = 1 - toxicScore;\n                const isCredible = credibilityScore > 0.6;\n                \n                const credibilityFactors = this.extractCredibilityFactors(text);\n                \n                return {\n                    isCredible: isCredible,\n                    confidence: credibilityScore,\n                    reasoning: `AI assessment: ${isCredible ? 'Source shows credible characteristics' : 'Multiple credibility concerns detected'}.`,\n                    credibilityFactors: credibilityFactors\n                };\n            }\n            \n            throw new Error('Invalid AI response');\n        } catch (error) {\n            console.log('AI credibility analysis failed, will use fallback');\n            throw error;\n        }\n    }\n    \n    // Analyze bias for Echo Chamber game\n    async analyzeBias(text) {\n        try {\n            const result = await this.makeHuggingFaceRequest(this.models.bias, text);\n            \n            if (result && result.length > 0) {\n                const prediction = result[0];\n                const toxicScore = prediction.score;\n                \n                // Heuristic: higher toxicity often correlates with bias\n                const biasLevel = toxicScore > 0.4 ? 'biased' : 'balanced';\n                const biasType = this.detectBiasType(text);\n                \n                return {\n                    biasLevel: biasLevel,\n                    biasType: biasType,\n                    confidence: toxicScore,\n                    reasoning: `AI detected ${biasLevel} content with ${biasType} characteristics.`\n                };\n            }\n            \n            throw new Error('Invalid AI response');\n        } catch (error) {\n            console.log('AI bias analysis failed, will use fallback');\n            throw error;\n        }\n    }\n    \n    // Helper methods for enhanced analysis\n    extractCredibilityFactors(text) {\n        const factors = [];\n        \n        // Check for credible source indicators\n        if (text.includes('study') || text.includes('research') || text.includes('peer-reviewed')) {\n            factors.push('Scientific backing mentioned');\n        }\n        if (text.includes('WHO') || text.includes('CDC') || text.includes('NASA') || text.includes('university')) {\n            factors.push('Authoritative source');\n        }\n        if (text.includes('report') || text.includes('published')) {\n            factors.push('Published content');\n        }\n        \n        // Check for non-credible indicators\n        if (text.includes('miracle') || text.includes('shocking') || text.includes('unbelievable')) {\n            factors.push('Sensational language');\n        }\n        if (text.includes('click here') || text.includes('won\\'t believe')) {\n            factors.push('Clickbait patterns');\n        }\n        if (text.includes('they don\\'t want you to know')) {\n            factors.push('Conspiracy language');\n        }\n        \n        return factors;\n    }\n    \n    detectBiasType(text) {\n        const lowerText = text.toLowerCase();\n        \n        if (lowerText.includes('everyone') || lowerText.includes('always') || lowerText.includes('never')) {\n            return 'absolute thinking';\n        }\n        if (lowerText.includes('they') && (lowerText.includes('lie') || lowerText.includes('wrong'))) {\n            return 'us vs them';\n        }\n        if (lowerText.includes('ignorant') || lowerText.includes('stupid') || lowerText.includes('brainwashed')) {\n            return 'ad hominem';\n        }\n        if (lowerText.includes('only') && lowerText.includes('truth')) {\n            return 'confirmation bias';\n        }\n        \n        return 'general bias';\n    }\n    \n    // Test AI connectivity\n    async testConnection() {\n        try {\n            const testResult = await this.analyzeSentiment('This is a test message.');\n            console.log('AI integration test successful:', testResult);\n            return true;\n        } catch (error) {\n            console.log('AI integration test failed, fallback system will be used:', error.message);\n            return false;\n        }\n    }\n    \n    // Get AI status for debugging\n    getStatus() {\n        return {\n            requestCount: this.requestCount,\n            maxRequests: this.maxRequests,\n            hasApiKey: this.huggingFaceKey !== 'hf_default_fallback_key',\n            modelsAvailable: Object.keys(this.models)\n        };\n    }\n    \n    // Reset rate limiting (for testing)\n    resetRateLimit() {\n        this.requestCount = 0;\n    }\n}\n\n// Alternative local AI integration using ml5.js (if Hugging Face fails)\nclass LocalAIIntegration {\n    constructor() {\n        this.models = {};\n        this.isLoaded = false;\n        this.initializeLocalModels();\n    }\n    \n    async initializeLocalModels() {\n        try {\n            // Note: This would require ml5.js models to be loaded\n            // For now, we'll use rule-based fallbacks\n            console.log('Local AI models would be initialized here');\n            this.isLoaded = true;\n        } catch (error) {\n            console.warn('Local AI initialization failed:', error);\n        }\n    }\n    \n    // Simple rule-based sentiment analysis\n    analyzeSentimentLocally(text) {\n        const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'fantastic', 'love', 'best', 'awesome', 'perfect'];\n        const negativeWords = ['bad', 'terrible', 'awful', 'hate', 'worst', 'horrible', 'disgusting', 'sad', 'angry', 'disappointed'];\n        \n        const words = text.toLowerCase().split(/\\s+/);\n        let positiveCount = 0;\n        let negativeCount = 0;\n        \n        words.forEach(word => {\n            if (positiveWords.includes(word)) positiveCount++;\n            if (negativeWords.includes(word)) negativeCount++;\n        });\n        \n        let sentiment = 'Neutral';\n        if (positiveCount > negativeCount) sentiment = 'Positive';\n        if (negativeCount > positiveCount) sentiment = 'Negative';\n        \n        const confidence = Math.min(0.9, Math.max(0.6, Math.abs(positiveCount - negativeCount) / words.length * 10));\n        \n        return {\n            sentiment: sentiment,\n            confidence: confidence,\n            reasoning: `Local analysis detected ${sentiment.toLowerCase()} sentiment based on word patterns.`\n        };\n    }\n    \n    // Simple rule-based credibility analysis\n    analyzeCredibilityLocally(text) {\n        const credibleIndicators = ['study', 'research', 'university', 'professor', 'published', 'peer-reviewed', 'WHO', 'CDC', 'NASA'];\n        const incredibleIndicators = ['miracle', 'shocking', 'unbelievable', 'secret', 'they don\\'t want', 'click here', 'free'];\n        \n        const lowerText = text.toLowerCase();\n        let credibilityScore = 0.5; // Start neutral\n        \n        credibleIndicators.forEach(indicator => {\n            if (lowerText.includes(indicator)) credibilityScore += 0.1;\n        });\n        \n        incredibleIndicators.forEach(indicator => {\n            if (lowerText.includes(indicator)) credibilityScore -= 0.15;\n        });\n        \n        credibilityScore = Math.max(0, Math.min(1, credibilityScore));\n        const isCredible = credibilityScore > 0.6;\n        \n        return {\n            isCredible: isCredible,\n            confidence: credibilityScore,\n            reasoning: `Local analysis ${isCredible ? 'found credible indicators' : 'detected suspicious patterns'} in the content.`\n        };\n    }\n    \n    // Simple rule-based bias analysis\n    analyzeBiasLocally(text) {\n        const biasIndicators = [\n            'everyone who', 'always', 'never', 'all of them', 'they are',\n            'ignorant', 'stupid', 'brainwashed', 'only fools',\n            'perfect', 'evil', 'our side', 'their side'\n        ];\n        \n        const balanceIndicators = [\n            'some', 'might', 'could', 'perhaps', 'it depends',\n            'on one hand', 'however', 'but', 'although', 'nuance',\n            'complex', 'multiple perspectives', 'both sides'\n        ];\n        \n        const lowerText = text.toLowerCase();\n        let biasScore = 0;\n        let balanceScore = 0;\n        \n        biasIndicators.forEach(indicator => {\n            if (lowerText.includes(indicator)) biasScore++;\n        });\n        \n        balanceIndicators.forEach(indicator => {\n            if (lowerText.includes(indicator)) balanceScore++;\n        });\n        \n        const biasLevel = biasScore > balanceScore ? 'biased' : 'balanced';\n        const confidence = Math.min(0.9, Math.max(0.6, Math.abs(biasScore - balanceScore) / 10));\n        \n        return {\n            biasLevel: biasLevel,\n            biasType: 'pattern-based',\n            confidence: confidence,\n            reasoning: `Local analysis detected ${biasLevel} language patterns.`\n        };\n    }\n}\n\n// Export for use in games\nwindow.AIIntegration = AIIntegration;\nwindow.LocalAIIntegration = LocalAIIntegration;\n","size_bytes":13722},"js/app.js":{"content":"// Main Application Controller\nclass VeriscopeApp {\n    constructor() {\n        this.currentScreen = 'landing-page';\n        this.audioManager = new AudioManager();\n        this.progressTracker = new ProgressTracker();\n        this.aiIntegration = new AIIntegration();\n        \n        // Initialize games\n        this.games = {\n            rumorville: new RumorVilleGame(),\n            filterbubble: new FilterBubbleGame(),\n            digitaldetective: new DigitalDetectiveGame(),\n            echochamber: new EchoChamberGame()\n        };\n        \n        this.init();\n    }\n    \n    init() {\n        this.setupEventListeners();\n        this.loadProgress();\n        this.updateHubDisplay();\n        \n        // Initialize audio\n        this.audioManager.init();\n        \n        console.log('Veriscope initialized successfully');\n    }\n    \n    setupEventListeners() {\n        // Landing page start button\n        document.getElementById('start-button').addEventListener('click', () => {\n            this.navigateToScreen('game-hub');\n        });\n        \n        // Game card clicks\n        document.querySelectorAll('.game-card').forEach(card => {\n            card.addEventListener('click', (e) => {\n                const gameId = card.dataset.game;\n                this.startGame(gameId);\n            });\n        });\n        \n        // Back buttons\n        document.querySelectorAll('.back-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const target = btn.dataset.target;\n                this.navigateToScreen(target);\n            });\n        });\n        \n        // Audio toggle buttons\n        this.setupAudioToggleListeners();\n        \n        // Flashcard continue button\n        document.getElementById('continue-btn').addEventListener('click', () => {\n            this.closeFlashcard();\n        });\n        \n        // Restart journey button\n        document.getElementById('restart-journey').addEventListener('click', () => {\n            this.restartJourney();\n        });\n    }\n    \n    setupAudioToggleListeners() {\n        const gameNames = ['rumorville', 'filterbubble', 'detective', 'echochamber'];\n        \n        gameNames.forEach(gameName => {\n            const musicToggle = document.getElementById(`${gameName}-music-toggle`);\n            const sfxToggle = document.getElementById(`${gameName}-sfx-toggle`);\n            \n            if (musicToggle) {\n                musicToggle.addEventListener('click', () => {\n                    this.audioManager.toggleMusic(gameName);\n                    musicToggle.classList.toggle('muted');\n                });\n            }\n            \n            if (sfxToggle) {\n                sfxToggle.addEventListener('click', () => {\n                    this.audioManager.toggleSFX(gameName);\n                    sfxToggle.classList.toggle('muted');\n                });\n            }\n        });\n    }\n    \n    navigateToScreen(screenId) {\n        // Hide current screen\n        const currentScreenEl = document.getElementById(this.currentScreen);\n        if (currentScreenEl) {\n            currentScreenEl.classList.remove('active');\n        }\n        \n        // Show target screen\n        const targetScreenEl = document.getElementById(screenId);\n        if (targetScreenEl) {\n            targetScreenEl.classList.add('active');\n            this.currentScreen = screenId;\n            \n            // Stop current audio and start appropriate audio for new screen\n            this.audioManager.stopAll();\n            \n            if (screenId.includes('-game')) {\n                const gameKey = screenId.replace('-game', '').replace('digital', '');\n                this.audioManager.playBackgroundMusic(gameKey);\n            }\n        }\n        \n        console.log(`Navigated to: ${screenId}`);\n    }\n    \n    startGame(gameId) {\n        const game = this.games[gameId];\n        if (game) {\n            this.navigateToScreen(`${gameId}-game`);\n            game.start();\n            console.log(`Started game: ${gameId}`);\n        }\n    }\n    \n    loadProgress() {\n        const savedProgress = localStorage.getItem('veriscope-progress');\n        if (savedProgress) {\n            try {\n                const progress = JSON.parse(savedProgress);\n                this.progressTracker.loadProgress(progress);\n            } catch (e) {\n                console.warn('Failed to load saved progress:', e);\n            }\n        }\n    }\n    \n    updateHubDisplay() {\n        const completedGames = this.progressTracker.getCompletedGames();\n        const totalGames = 4;\n        \n        // Update progress display\n        document.getElementById('games-completed').textContent = completedGames.length;\n        const progressFill = document.getElementById('progress-fill');\n        progressFill.style.width = `${(completedGames.length / totalGames) * 100}%`;\n        \n        // Update game card statuses\n        completedGames.forEach(gameId => {\n            const card = document.getElementById(`${gameId}-card`);\n            const status = document.getElementById(`${gameId}-status`);\n            \n            if (card && status) {\n                card.classList.add('completed');\n                status.innerHTML = '<i class=\"fas fa-check-circle\"></i> Completed';\n                status.classList.add('completed');\n            }\n        });\n        \n        // Show final summary if all games completed\n        if (completedGames.length >= totalGames) {\n            document.getElementById('final-summary').style.display = 'block';\n        }\n    }\n    \n    onGameComplete(gameId, learningContent) {\n        // Mark game as complete\n        this.progressTracker.markGameComplete(gameId);\n        \n        // Save progress\n        localStorage.setItem('veriscope-progress', JSON.stringify(this.progressTracker.getProgress()));\n        \n        // Show learning flashcard\n        this.showFlashcard(learningContent);\n        \n        // Update hub display\n        this.updateHubDisplay();\n        \n        // Play completion sound\n        this.audioManager.playSFX('completion');\n        \n        console.log(`Game completed: ${gameId}`);\n    }\n    \n    showFlashcard(content) {\n        const modal = document.getElementById('flashcard-modal');\n        const flashcardContent = document.getElementById('flashcard-content');\n        \n        flashcardContent.innerHTML = content;\n        modal.classList.add('active');\n    }\n    \n    closeFlashcard() {\n        const modal = document.getElementById('flashcard-modal');\n        modal.classList.remove('active');\n        \n        // Return to game hub\n        this.navigateToScreen('game-hub');\n    }\n    \n    restartJourney() {\n        // Clear progress\n        this.progressTracker.reset();\n        localStorage.removeItem('veriscope-progress');\n        \n        // Reset UI\n        document.querySelectorAll('.game-card').forEach(card => {\n            card.classList.remove('completed');\n        });\n        \n        document.querySelectorAll('.game-status').forEach(status => {\n            status.innerHTML = '<i class=\"fas fa-play-circle\"></i> Start Game';\n            status.classList.remove('completed');\n        });\n        \n        document.getElementById('final-summary').style.display = 'none';\n        \n        // Reset games\n        Object.values(this.games).forEach(game => {\n            if (game.reset) {\n                game.reset();\n            }\n        });\n        \n        // Update display\n        this.updateHubDisplay();\n        \n        // Navigate to landing\n        this.navigateToScreen('landing-page');\n        \n        console.log('Journey restarted');\n    }\n    \n    // Public methods for games to call\n    static getInstance() {\n        if (!VeriscopeApp.instance) {\n            VeriscopeApp.instance = new VeriscopeApp();\n        }\n        return VeriscopeApp.instance;\n    }\n}\n\n// Initialize app when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.veriscopeApp = VeriscopeApp.getInstance();\n});\n\n// Utility functions for games\nfunction showGameResult(isCorrect, title, explanation, onNext) {\n    const resultHtml = `\n        <div class=\"game-result ${isCorrect ? 'result-correct' : 'result-incorrect'}\">\n            <div class=\"result-icon\">\n                ${isCorrect ? '✅' : '❌'}\n            </div>\n            <div class=\"result-title\">${title}</div>\n            <div class=\"result-explanation\">${explanation}</div>\n            <button class=\"next-btn\" onclick=\"${onNext}\">Continue</button>\n        </div>\n    `;\n    \n    return resultHtml;\n}\n\nfunction showLoading(message = 'Processing your choice...') {\n    return `\n        <div class=\"loading\">\n            <div class=\"spinner\"></div>\n            <span>${message}</span>\n        </div>\n    `;\n}\n\n// Global utility functions\nwindow.playSound = (soundName) => {\n    if (window.veriscopeApp) {\n        window.veriscopeApp.audioManager.playSFX(soundName);\n    }\n};\n\nwindow.completeGame = (gameId, learningContent) => {\n    if (window.veriscopeApp) {\n        window.veriscopeApp.onGameComplete(gameId, learningContent);\n    }\n};\n","size_bytes":9096},"js/audio-manager.js":{"content":"// Audio Management System for Veriscope\nclass AudioManager {\n    constructor() {\n        this.audioContext = null;\n        this.sounds = {};\n        this.music = {};\n        this.musicVolume = 0.3;\n        this.sfxVolume = 0.5;\n        this.musicEnabled = true;\n        this.sfxEnabled = true;\n        this.currentMusic = null;\n        this.fadeInterval = null;\n        \n        // Audio file mappings (using placeholder files for now)\n        this.soundFiles = {\n            // Sound effects\n            'pop': this.createSynthSound('pop'),\n            'whoosh': this.createSynthSound('whoosh'),\n            'chime': this.createSynthSound('chime'),\n            'thud': this.createSynthSound('thud'),\n            'typewriter': this.createSynthSound('typewriter'),\n            'click': this.createSynthSound('click'),\n            'ping': this.createSynthSound('ping'),\n            'unlock': this.createSynthSound('unlock'),\n            'success': this.createSynthSound('success'),\n            'error': this.createSynthSound('error'),\n            'completion': this.createSynthSound('completion')\n        };\n        \n        this.musicFiles = {\n            // Background music\n            'rumorville': this.createSynthMusic('upbeat'),\n            'filterbubble': this.createSynthMusic('ambient'),\n            'detective': this.createSynthMusic('noir'),\n            'echochamber': this.createSynthMusic('techno')\n        };\n    }\n    \n    async init() {\n        try {\n            // Initialize Web Audio API\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            \n            // Load user preferences\n            this.loadPreferences();\n            \n            console.log('Audio system initialized');\n            \n            // Generate synthetic audio\n            this.generateAllSounds();\n            \n        } catch (error) {\n            console.warn('Audio initialization failed:', error);\n        }\n    }\n    \n    loadPreferences() {\n        const prefs = localStorage.getItem('veriscope-audio-prefs');\n        if (prefs) {\n            try {\n                const preferences = JSON.parse(prefs);\n                this.musicEnabled = preferences.musicEnabled !== false;\n                this.sfxEnabled = preferences.sfxEnabled !== false;\n                this.musicVolume = preferences.musicVolume || 0.3;\n                this.sfxVolume = preferences.sfxVolume || 0.5;\n            } catch (e) {\n                console.warn('Failed to load audio preferences');\n            }\n        }\n    }\n    \n    savePreferences() {\n        const preferences = {\n            musicEnabled: this.musicEnabled,\n            sfxEnabled: this.sfxEnabled,\n            musicVolume: this.musicVolume,\n            sfxVolume: this.sfxVolume\n        };\n        localStorage.setItem('veriscope-audio-prefs', JSON.stringify(preferences));\n    }\n    \n    // Create synthetic sound effects using Web Audio API\n    createSynthSound(type) {\n        return () => {\n            if (!this.audioContext || !this.sfxEnabled) return;\n            \n            const oscillator = this.audioContext.createOscillator();\n            const gainNode = this.audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(this.audioContext.destination);\n            \n            const now = this.audioContext.currentTime;\n            \n            switch (type) {\n                case 'pop':\n                    oscillator.frequency.setValueAtTime(800, now);\n                    oscillator.frequency.exponentialRampToValueAtTime(400, now + 0.1);\n                    gainNode.gain.setValueAtTime(this.sfxVolume * 0.3, now);\n                    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.1);\n                    oscillator.type = 'sine';\n                    break;\n                    \n                case 'whoosh':\n                    oscillator.frequency.setValueAtTime(200, now);\n                    oscillator.frequency.exponentialRampToValueAtTime(600, now + 0.3);\n                    gainNode.gain.setValueAtTime(this.sfxVolume * 0.2, now);\n                    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.3);\n                    oscillator.type = 'sawtooth';\n                    break;\n                    \n                case 'chime':\n                    oscillator.frequency.setValueAtTime(523, now); // C5\n                    oscillator.frequency.setValueAtTime(659, now + 0.1); // E5\n                    oscillator.frequency.setValueAtTime(784, now + 0.2); // G5\n                    gainNode.gain.setValueAtTime(this.sfxVolume * 0.4, now);\n                    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.5);\n                    oscillator.type = 'sine';\n                    break;\n                    \n                case 'thud':\n                    oscillator.frequency.setValueAtTime(60, now);\n                    oscillator.frequency.exponentialRampToValueAtTime(30, now + 0.2);\n                    gainNode.gain.setValueAtTime(this.sfxVolume * 0.6, now);\n                    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.2);\n                    oscillator.type = 'square';\n                    break;\n                    \n                case 'typewriter':\n                    oscillator.frequency.setValueAtTime(1000, now);\n                    gainNode.gain.setValueAtTime(this.sfxVolume * 0.2, now);\n                    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.05);\n                    oscillator.type = 'square';\n                    break;\n                    \n                case 'click':\n                    oscillator.frequency.setValueAtTime(1200, now);\n                    gainNode.gain.setValueAtTime(this.sfxVolume * 0.3, now);\n                    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.05);\n                    oscillator.type = 'square';\n                    break;\n                    \n                case 'ping':\n                    oscillator.frequency.setValueAtTime(1000, now);\n                    oscillator.frequency.exponentialRampToValueAtTime(800, now + 0.1);\n                    gainNode.gain.setValueAtTime(this.sfxVolume * 0.4, now);\n                    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.2);\n                    oscillator.type = 'sine';\n                    break;\n                    \n                case 'unlock':\n                    // Play a chord\n                    this.playChord([523, 659, 784], 0.3); // C-E-G major chord\n                    return; // Early return to avoid playing single oscillator\n                    \n                case 'success':\n                    // Play ascending notes\n                    setTimeout(() => this.playSingleNote(523, 0.1), 0);   // C\n                    setTimeout(() => this.playSingleNote(659, 0.1), 100); // E\n                    setTimeout(() => this.playSingleNote(784, 0.2), 200); // G\n                    return;\n                    \n                case 'error':\n                    oscillator.frequency.setValueAtTime(300, now);\n                    oscillator.frequency.exponentialRampToValueAtTime(200, now + 0.3);\n                    gainNode.gain.setValueAtTime(this.sfxVolume * 0.5, now);\n                    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.3);\n                    oscillator.type = 'sawtooth';\n                    break;\n                    \n                case 'completion':\n                    // Victory fanfare\n                    setTimeout(() => this.playSingleNote(523, 0.15), 0);   // C\n                    setTimeout(() => this.playSingleNote(659, 0.15), 150); // E\n                    setTimeout(() => this.playSingleNote(784, 0.15), 300); // G\n                    setTimeout(() => this.playSingleNote(1047, 0.3), 450); // C octave\n                    return;\n                    \n                default:\n                    oscillator.frequency.setValueAtTime(440, now);\n                    gainNode.gain.setValueAtTime(this.sfxVolume * 0.3, now);\n                    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.2);\n                    oscillator.type = 'sine';\n            }\n            \n            oscillator.start(now);\n            oscillator.stop(now + 0.5);\n        };\n    }\n    \n    playSingleNote(frequency, duration) {\n        if (!this.audioContext || !this.sfxEnabled) return;\n        \n        const oscillator = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        \n        const now = this.audioContext.currentTime;\n        \n        oscillator.frequency.setValueAtTime(frequency, now);\n        oscillator.type = 'sine';\n        \n        gainNode.gain.setValueAtTime(this.sfxVolume * 0.3, now);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, now + duration);\n        \n        oscillator.start(now);\n        oscillator.stop(now + duration);\n    }\n    \n    playChord(frequencies, duration) {\n        if (!this.audioContext || !this.sfxEnabled) return;\n        \n        frequencies.forEach(freq => {\n            this.playSingleNote(freq, duration);\n        });\n    }\n    \n    // Create synthetic background music\n    createSynthMusic(type) {\n        return () => {\n            if (!this.audioContext || !this.musicEnabled) return null;\n            \n            // Create a simple looping background track\n            const musicTrack = {\n                oscillators: [],\n                gainNodes: [],\n                isPlaying: false,\n                stop: function() {\n                    this.oscillators.forEach(osc => {\n                        try { osc.stop(); } catch(e) {}\n                    });\n                    this.isPlaying = false;\n                }\n            };\n            \n            const now = this.audioContext.currentTime;\n            \n            switch (type) {\n                case 'upbeat':\n                    this.createUpbeatTrack(musicTrack, now);\n                    break;\n                case 'ambient':\n                    this.createAmbientTrack(musicTrack, now);\n                    break;\n                case 'noir':\n                    this.createNoirTrack(musicTrack, now);\n                    break;\n                case 'techno':\n                    this.createTechnoTrack(musicTrack, now);\n                    break;\n            }\n            \n            musicTrack.isPlaying = true;\n            return musicTrack;\n        };\n    }\n    \n    createUpbeatTrack(track, startTime) {\n        // Simple major scale melody\n        const notes = [523, 587, 659, 698, 784, 880, 988, 1047]; // C major scale\n        let noteIndex = 0;\n        \n        const playMelodyNote = () => {\n            if (!track.isPlaying) return;\n            \n            const oscillator = this.audioContext.createOscillator();\n            const gainNode = this.audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(this.audioContext.destination);\n            \n            oscillator.frequency.setValueAtTime(notes[noteIndex], this.audioContext.currentTime);\n            oscillator.type = 'sine';\n            \n            gainNode.gain.setValueAtTime(this.musicVolume * 0.1, this.audioContext.currentTime);\n            \n            oscillator.start();\n            oscillator.stop(this.audioContext.currentTime + 0.5);\n            \n            noteIndex = (noteIndex + 1) % notes.length;\n            \n            setTimeout(playMelodyNote, 600);\n        };\n        \n        setTimeout(playMelodyNote, 100);\n    }\n    \n    createAmbientTrack(track, startTime) {\n        // Create ambient pads\n        const frequencies = [130.81, 164.81, 196.00, 246.94]; // C3-E3-G3-B3\n        \n        frequencies.forEach((freq, index) => {\n            const oscillator = this.audioContext.createOscillator();\n            const gainNode = this.audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(this.audioContext.destination);\n            \n            oscillator.frequency.setValueAtTime(freq, startTime);\n            oscillator.type = 'sine';\n            \n            gainNode.gain.setValueAtTime(0, startTime);\n            gainNode.gain.linearRampToValueAtTime(this.musicVolume * 0.05, startTime + 2);\n            \n            oscillator.start(startTime);\n            \n            track.oscillators.push(oscillator);\n            track.gainNodes.push(gainNode);\n        });\n    }\n    \n    createNoirTrack(track, startTime) {\n        // Jazz-inspired bass line\n        const bassNotes = [65.41, 73.42, 87.31, 98.00]; // C2-D2-F2-G2\n        let bassIndex = 0;\n        \n        const playBassNote = () => {\n            if (!track.isPlaying) return;\n            \n            const oscillator = this.audioContext.createOscillator();\n            const gainNode = this.audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(this.audioContext.destination);\n            \n            oscillator.frequency.setValueAtTime(bassNotes[bassIndex], this.audioContext.currentTime);\n            oscillator.type = 'triangle';\n            \n            gainNode.gain.setValueAtTime(this.musicVolume * 0.15, this.audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 1.8);\n            \n            oscillator.start();\n            oscillator.stop(this.audioContext.currentTime + 2);\n            \n            bassIndex = (bassIndex + 1) % bassNotes.length;\n            \n            setTimeout(playBassNote, 1800);\n        };\n        \n        setTimeout(playBassNote, 100);\n    }\n    \n    createTechnoTrack(track, startTime) {\n        // Create a simple techno beat\n        const beatInterval = setInterval(() => {\n            if (!track.isPlaying) {\n                clearInterval(beatInterval);\n                return;\n            }\n            \n            // Kick drum\n            const kick = this.audioContext.createOscillator();\n            const kickGain = this.audioContext.createGain();\n            \n            kick.connect(kickGain);\n            kickGain.connect(this.audioContext.destination);\n            \n            kick.frequency.setValueAtTime(60, this.audioContext.currentTime);\n            kick.type = 'sine';\n            \n            kickGain.gain.setValueAtTime(this.musicVolume * 0.2, this.audioContext.currentTime);\n            kickGain.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.2);\n            \n            kick.start();\n            kick.stop(this.audioContext.currentTime + 0.2);\n            \n        }, 500);\n    }\n    \n    generateAllSounds() {\n        // Pre-generate all sound effect functions\n        Object.keys(this.soundFiles).forEach(key => {\n            this.sounds[key] = this.soundFiles[key];\n        });\n        \n        Object.keys(this.musicFiles).forEach(key => {\n            this.music[key] = this.musicFiles[key];\n        });\n    }\n    \n    // Public methods\n    playSFX(soundName) {\n        if (!this.sfxEnabled || !this.sounds[soundName]) return;\n        \n        try {\n            // Resume audio context if suspended (mobile browsers)\n            if (this.audioContext.state === 'suspended') {\n                this.audioContext.resume();\n            }\n            \n            this.sounds[soundName]();\n        } catch (error) {\n            console.warn(`Failed to play sound ${soundName}:`, error);\n        }\n    }\n    \n    playBackgroundMusic(gameName) {\n        if (!this.musicEnabled || !this.music[gameName]) return;\n        \n        try {\n            // Stop current music\n            this.stopMusic();\n            \n            // Resume audio context if suspended\n            if (this.audioContext.state === 'suspended') {\n                this.audioContext.resume();\n            }\n            \n            // Start new music\n            this.currentMusic = this.music[gameName]();\n        } catch (error) {\n            console.warn(`Failed to play music for ${gameName}:`, error);\n        }\n    }\n    \n    stopMusic() {\n        if (this.currentMusic && this.currentMusic.stop) {\n            this.currentMusic.stop();\n            this.currentMusic = null;\n        }\n    }\n    \n    stopAll() {\n        this.stopMusic();\n    }\n    \n    toggleMusic(gameName) {\n        this.musicEnabled = !this.musicEnabled;\n        \n        if (!this.musicEnabled) {\n            this.stopMusic();\n        } else if (gameName) {\n            this.playBackgroundMusic(gameName);\n        }\n        \n        this.savePreferences();\n    }\n    \n    toggleSFX(gameName) {\n        this.sfxEnabled = !this.sfxEnabled;\n        this.savePreferences();\n    }\n    \n    setMusicVolume(volume) {\n        this.musicVolume = Math.max(0, Math.min(1, volume));\n        this.savePreferences();\n    }\n    \n    setSFXVolume(volume) {\n        this.sfxVolume = Math.max(0, Math.min(1, volume));\n        this.savePreferences();\n    }\n    \n    // Utility methods\n    fadeOutMusic(duration = 1000) {\n        if (!this.currentMusic) return;\n        \n        const steps = 20;\n        const stepTime = duration / steps;\n        const volumeStep = this.musicVolume / steps;\n        \n        let currentStep = 0;\n        \n        this.fadeInterval = setInterval(() => {\n            currentStep++;\n            const newVolume = this.musicVolume - (volumeStep * currentStep);\n            \n            if (currentStep >= steps || newVolume <= 0) {\n                this.stopMusic();\n                clearInterval(this.fadeInterval);\n                this.fadeInterval = null;\n            }\n        }, stepTime);\n    }\n    \n    getStatus() {\n        return {\n            audioContextState: this.audioContext ? this.audioContext.state : 'not initialized',\n            musicEnabled: this.musicEnabled,\n            sfxEnabled: this.sfxEnabled,\n            musicVolume: this.musicVolume,\n            sfxVolume: this.sfxVolume,\n            currentMusic: this.currentMusic ? 'playing' : 'none',\n            availableSounds: Object.keys(this.sounds),\n            availableMusic: Object.keys(this.music)\n        };\n    }\n}\n\n// Export for global use\nwindow.AudioManager = AudioManager;\n","size_bytes":18314},"js/progress-tracker.js":{"content":"// Progress Tracking System for Veriscope\nclass ProgressTracker {\n    constructor() {\n        this.progress = {\n            completedGames: [],\n            gameScores: {},\n            totalPlayTime: 0,\n            achievements: [],\n            sessionStartTime: Date.now(),\n            statistics: {\n                rumorsAnalyzed: 0,\n                bubblesProcessed: 0,\n                evidenceInvestigated: 0,\n                biasDetected: 0,\n                correctChoices: 0,\n                totalChoices: 0\n            }\n        };\n        \n        this.achievements = {\n            'first_game': {\n                name: 'First Steps',\n                description: 'Complete your first Veriscope game',\n                icon: '🎯',\n                unlocked: false\n            },\n            'all_games': {\n                name: 'Media Literacy Master',\n                description: 'Complete all 4 Veriscope games',\n                icon: '🏆',\n                unlocked: false\n            },\n            'rumor_buster': {\n                name: 'Rumor Buster',\n                description: 'Score 80% or higher in RumorVille',\n                icon: '🕵️',\n                unlocked: false\n            },\n            'bubble_breaker': {\n                name: 'Bubble Breaker',\n                description: 'Maintain 70% diversity in Filter Bubble Simulator',\n                icon: '🫧',\n                unlocked: false\n            },\n            'master_detective': {\n                name: 'Master Detective',\n                description: 'Score 85% or higher in Digital Detective',\n                icon: '🔍',\n                unlocked: false\n            },\n            'echo_escapist': {\n                name: 'Echo Escapist',\n                description: 'Escape the echo chamber with low echo level',\n                icon: '🚪',\n                unlocked: false\n            },\n            'perfectionist': {\n                name: 'Perfectionist',\n                description: 'Score 100% in any game',\n                icon: '💯',\n                unlocked: false\n            },\n            'speed_runner': {\n                name: 'Speed Runner',\n                description: 'Complete all games in under 30 minutes',\n                icon: '⚡',\n                unlocked: false\n            },\n            'critical_thinker': {\n                name: 'Critical Thinker',\n                description: 'Make 50 correct analytical choices',\n                icon: '🧠',\n                unlocked: false\n            }\n        };\n        \n        this.loadProgress();\n    }\n    \n    loadProgress(savedProgress = null) {\n        if (savedProgress) {\n            // Load from provided data (for restoration)\n            this.progress = { ...this.progress, ...savedProgress };\n        } else {\n            // Load from localStorage\n            const saved = localStorage.getItem('veriscope-progress');\n            if (saved) {\n                try {\n                    const parsedProgress = JSON.parse(saved);\n                    this.progress = { ...this.progress, ...parsedProgress };\n                    \n                    // Restore achievement states\n                    if (parsedProgress.achievements) {\n                        parsedProgress.achievements.forEach(achievementId => {\n                            if (this.achievements[achievementId]) {\n                                this.achievements[achievementId].unlocked = true;\n                            }\n                        });\n                    }\n                } catch (error) {\n                    console.warn('Failed to load progress:', error);\n                }\n            }\n        }\n        \n        // Update session start time\n        this.progress.sessionStartTime = Date.now();\n    }\n    \n    saveProgress() {\n        try {\n            // Prepare data for saving\n            const saveData = {\n                ...this.progress,\n                achievements: Object.keys(this.achievements).filter(id => this.achievements[id].unlocked),\n                lastSaved: Date.now()\n            };\n            \n            localStorage.setItem('veriscope-progress', JSON.stringify(saveData));\n            console.log('Progress saved successfully');\n        } catch (error) {\n            console.error('Failed to save progress:', error);\n        }\n    }\n    \n    markGameComplete(gameId, gameData = {}) {\n        // Mark game as completed\n        if (!this.progress.completedGames.includes(gameId)) {\n            this.progress.completedGames.push(gameId);\n        }\n        \n        // Store game score and data\n        this.progress.gameScores[gameId] = {\n            score: gameData.score || 0,\n            percentage: gameData.percentage || 0,\n            completedAt: Date.now(),\n            attempts: (this.progress.gameScores[gameId]?.attempts || 0) + 1,\n            ...gameData\n        };\n        \n        // Update statistics\n        this.updateStatistics(gameId, gameData);\n        \n        // Check for achievements\n        this.checkAchievements(gameId, gameData);\n        \n        // Save progress\n        this.saveProgress();\n        \n        console.log(`Game ${gameId} marked as complete:`, gameData);\n    }\n    \n    updateStatistics(gameId, gameData) {\n        const stats = this.progress.statistics;\n        \n        // Update game-specific statistics\n        switch (gameId) {\n            case 'rumorville':\n                stats.rumorsAnalyzed += gameData.totalRumors || 0;\n                break;\n            case 'filterbubble':\n                stats.bubblesProcessed += gameData.totalBubbles || 0;\n                break;\n            case 'digitaldetective':\n                stats.evidenceInvestigated += gameData.totalCases || 0;\n                break;\n            case 'echochamber':\n                stats.biasDetected += gameData.biasDetected || 0;\n                break;\n        }\n        \n        // Update general statistics\n        if (gameData.correctChoices !== undefined) {\n            stats.correctChoices += gameData.correctChoices;\n        }\n        if (gameData.totalChoices !== undefined) {\n            stats.totalChoices += gameData.totalChoices;\n        }\n        \n        // Update play time\n        const sessionTime = Date.now() - this.progress.sessionStartTime;\n        this.progress.totalPlayTime += sessionTime;\n        this.progress.sessionStartTime = Date.now(); // Reset for next game\n    }\n    \n    checkAchievements(gameId, gameData) {\n        const newAchievements = [];\n        \n        // First game achievement\n        if (!this.achievements.first_game.unlocked && this.progress.completedGames.length === 1) {\n            this.achievements.first_game.unlocked = true;\n            newAchievements.push('first_game');\n        }\n        \n        // All games achievement\n        if (!this.achievements.all_games.unlocked && this.progress.completedGames.length === 4) {\n            this.achievements.all_games.unlocked = true;\n            newAchievements.push('all_games');\n        }\n        \n        // Game-specific achievements\n        const percentage = gameData.percentage || 0;\n        \n        if (gameId === 'rumorville' && percentage >= 80 && !this.achievements.rumor_buster.unlocked) {\n            this.achievements.rumor_buster.unlocked = true;\n            newAchievements.push('rumor_buster');\n        }\n        \n        if (gameId === 'filterbubble' && (gameData.diversityScore >= 70) && !this.achievements.bubble_breaker.unlocked) {\n            this.achievements.bubble_breaker.unlocked = true;\n            newAchievements.push('bubble_breaker');\n        }\n        \n        if (gameId === 'digitaldetective' && percentage >= 85 && !this.achievements.master_detective.unlocked) {\n            this.achievements.master_detective.unlocked = true;\n            newAchievements.push('master_detective');\n        }\n        \n        if (gameId === 'echochamber' && (gameData.echoScore <= 30) && !this.achievements.echo_escapist.unlocked) {\n            this.achievements.echo_escapist.unlocked = true;\n            newAchievements.push('echo_escapist');\n        }\n        \n        // Perfectionist achievement\n        if (percentage === 100 && !this.achievements.perfectionist.unlocked) {\n            this.achievements.perfectionist.unlocked = true;\n            newAchievements.push('perfectionist');\n        }\n        \n        // Speed runner achievement (all games completed in under 30 minutes)\n        if (this.progress.completedGames.length === 4 && this.progress.totalPlayTime < 30 * 60 * 1000 && !this.achievements.speed_runner.unlocked) {\n            this.achievements.speed_runner.unlocked = true;\n            newAchievements.push('speed_runner');\n        }\n        \n        // Critical thinker achievement\n        if (this.progress.statistics.correctChoices >= 50 && !this.achievements.critical_thinker.unlocked) {\n            this.achievements.critical_thinker.unlocked = true;\n            newAchievements.push('critical_thinker');\n        }\n        \n        // Show achievement notifications\n        newAchievements.forEach(achievementId => {\n            this.showAchievementNotification(achievementId);\n        });\n    }\n    \n    showAchievementNotification(achievementId) {\n        const achievement = this.achievements[achievementId];\n        if (!achievement) return;\n        \n        // Create achievement notification\n        const notification = document.createElement('div');\n        notification.className = 'achievement-notification';\n        notification.innerHTML = `\n            <div class=\"achievement-content\">\n                <div class=\"achievement-icon\">${achievement.icon}</div>\n                <div class=\"achievement-text\">\n                    <div class=\"achievement-title\">Achievement Unlocked!</div>\n                    <div class=\"achievement-name\">${achievement.name}</div>\n                    <div class=\"achievement-description\">${achievement.description}</div>\n                </div>\n            </div>\n        `;\n        \n        // Add styles\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: linear-gradient(135deg, #667eea, #764ba2);\n            color: white;\n            padding: 1rem;\n            border-radius: 15px;\n            box-shadow: 0 8px 30px rgba(0,0,0,0.3);\n            z-index: 10000;\n            max-width: 300px;\n            animation: achievementSlideIn 0.5s ease-out;\n        `;\n        \n        // Add animation styles\n        const style = document.createElement('style');\n        style.textContent = `\n            @keyframes achievementSlideIn {\n                from { transform: translateX(100%); opacity: 0; }\n                to { transform: translateX(0); opacity: 1; }\n            }\n            @keyframes achievementSlideOut {\n                from { transform: translateX(0); opacity: 1; }\n                to { transform: translateX(100%); opacity: 0; }\n            }\n            .achievement-content { display: flex; align-items: center; gap: 1rem; }\n            .achievement-icon { font-size: 2rem; }\n            .achievement-title { font-size: 0.8rem; opacity: 0.8; }\n            .achievement-name { font-size: 1rem; font-weight: bold; margin-bottom: 0.2rem; }\n            .achievement-description { font-size: 0.8rem; opacity: 0.9; }\n        `;\n        document.head.appendChild(style);\n        \n        document.body.appendChild(notification);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            notification.style.animation = 'achievementSlideOut 0.5s ease-in';\n            setTimeout(() => {\n                if (notification.parentNode) {\n                    notification.parentNode.removeChild(notification);\n                }\n            }, 500);\n        }, 5000);\n        \n        // Play achievement sound\n        if (window.playSound) {\n            window.playSound('completion');\n        }\n        \n        console.log(`Achievement unlocked: ${achievement.name}`);\n    }\n    \n    // Getter methods\n    getCompletedGames() {\n        return [...this.progress.completedGames];\n    }\n    \n    getGameScore(gameId) {\n        return this.progress.gameScores[gameId] || null;\n    }\n    \n    getProgress() {\n        return {\n            ...this.progress,\n            achievements: Object.keys(this.achievements).filter(id => this.achievements[id].unlocked)\n        };\n    }\n    \n    getStatistics() {\n        const stats = { ...this.progress.statistics };\n        \n        // Calculate derived statistics\n        stats.accuracyRate = stats.totalChoices > 0 ? \n            Math.round((stats.correctChoices / stats.totalChoices) * 100) : 0;\n        \n        stats.averageScore = this.calculateAverageScore();\n        stats.playTimeFormatted = this.formatPlayTime(this.progress.totalPlayTime);\n        stats.gamesCompleted = this.progress.completedGames.length;\n        stats.achievementsUnlocked = Object.values(this.achievements).filter(a => a.unlocked).length;\n        \n        return stats;\n    }\n    \n    getAchievements() {\n        return Object.entries(this.achievements).map(([id, achievement]) => ({\n            id,\n            ...achievement\n        }));\n    }\n    \n    getUnlockedAchievements() {\n        return this.getAchievements().filter(achievement => achievement.unlocked);\n    }\n    \n    // Utility methods\n    calculateAverageScore() {\n        const scores = Object.values(this.progress.gameScores);\n        if (scores.length === 0) return 0;\n        \n        const totalScore = scores.reduce((sum, gameScore) => sum + (gameScore.percentage || 0), 0);\n        return Math.round(totalScore / scores.length);\n    }\n    \n    formatPlayTime(milliseconds) {\n        const minutes = Math.floor(milliseconds / 60000);\n        const seconds = Math.floor((milliseconds % 60000) / 1000);\n        \n        if (minutes === 0) {\n            return `${seconds}s`;\n        } else {\n            return `${minutes}m ${seconds}s`;\n        }\n    }\n    \n    isGameCompleted(gameId) {\n        return this.progress.completedGames.includes(gameId);\n    }\n    \n    getCompletionPercentage() {\n        return Math.round((this.progress.completedGames.length / 4) * 100);\n    }\n    \n    // Progress management\n    reset() {\n        this.progress = {\n            completedGames: [],\n            gameScores: {},\n            totalPlayTime: 0,\n            achievements: [],\n            sessionStartTime: Date.now(),\n            statistics: {\n                rumorsAnalyzed: 0,\n                bubblesProcessed: 0,\n                evidenceInvestigated: 0,\n                biasDetected: 0,\n                correctChoices: 0,\n                totalChoices: 0\n            }\n        };\n        \n        // Reset achievements\n        Object.keys(this.achievements).forEach(id => {\n            this.achievements[id].unlocked = false;\n        });\n        \n        // Clear localStorage\n        localStorage.removeItem('veriscope-progress');\n        \n        console.log('Progress reset successfully');\n    }\n    \n    exportProgress() {\n        return JSON.stringify({\n            progress: this.progress,\n            achievements: Object.keys(this.achievements).filter(id => this.achievements[id].unlocked),\n            exportedAt: Date.now(),\n            version: '1.0'\n        });\n    }\n    \n    importProgress(progressData) {\n        try {\n            const data = JSON.parse(progressData);\n            \n            if (data.version !== '1.0') {\n                throw new Error('Incompatible progress data version');\n            }\n            \n            this.loadProgress(data.progress);\n            \n            // Restore achievements\n            if (data.achievements) {\n                data.achievements.forEach(achievementId => {\n                    if (this.achievements[achievementId]) {\n                        this.achievements[achievementId].unlocked = true;\n                    }\n                });\n            }\n            \n            this.saveProgress();\n            console.log('Progress imported successfully');\n            return true;\n        } catch (error) {\n            console.error('Failed to import progress:', error);\n            return false;\n        }\n    }\n}\n\n// Export for global use\nwindow.ProgressTracker = ProgressTracker;\n","size_bytes":16277},"styles/games.css":{"content":"/* Game-Specific Themes */\n\n/* RumorVille Theme - Cartoonish bright town */\n.rumorville-theme {\n    background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 50%, #74b9ff 100%);\n    position: relative;\n}\n\n.rumorville-theme::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: \n        radial-gradient(circle at 20% 20%, rgba(255,255,255,0.1) 0%, transparent 50%),\n        radial-gradient(circle at 80% 80%, rgba(255,255,255,0.1) 0%, transparent 50%);\n    pointer-events: none;\n}\n\n/* Filter Bubble Theme - Abstract surreal */\n.filterbubble-theme {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #667eea 100%);\n    position: relative;\n    overflow: hidden;\n}\n\n.filterbubble-theme::before {\n    content: '';\n    position: fixed;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: \n        radial-gradient(circle at 30% 30%, rgba(255,255,255,0.1) 0%, transparent 30%),\n        radial-gradient(circle at 70% 70%, rgba(255,255,255,0.05) 0%, transparent 40%),\n        radial-gradient(circle at 10% 80%, rgba(255,255,255,0.08) 0%, transparent 25%);\n    animation: float 20s infinite linear;\n    pointer-events: none;\n}\n\n@keyframes float {\n    0% { transform: rotate(0deg) translate(-20px) rotate(0deg); }\n    100% { transform: rotate(360deg) translate(-20px) rotate(-360deg); }\n}\n\n/* Digital Detective Theme - Noir grayscale */\n.detective-theme {\n    background: linear-gradient(135deg, #2c3e50 0%, #34495e 50%, #2c3e50 100%);\n    position: relative;\n}\n\n.detective-theme::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: \n        linear-gradient(45deg, transparent 40%, rgba(255,255,255,0.02) 42%, transparent 44%),\n        linear-gradient(-45deg, transparent 40%, rgba(255,255,255,0.02) 42%, transparent 44%);\n    pointer-events: none;\n}\n\n/* Echo Chamber Theme - Tense techno */\n.echochamber-theme {\n    background: linear-gradient(135deg, #ee5a6f 0%, #f29263 50%, #ee5a6f 100%);\n    position: relative;\n}\n\n.echochamber-theme::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: \n        repeating-linear-gradient(\n            90deg,\n            transparent,\n            transparent 98px,\n            rgba(0,0,0,0.03) 100px\n        );\n    pointer-events: none;\n}\n\n/* Game Content Areas */\n.game-content {\n    background: rgba(255,255,255,0.95);\n    border-radius: 20px;\n    padding: 2rem;\n    min-height: 500px;\n    position: relative;\n    backdrop-filter: blur(10px);\n    box-shadow: 0 10px 40px rgba(0,0,0,0.1);\n}\n\n/* RumorVille Specific */\n.rumor-container {\n    text-align: center;\n}\n\n.rumor-bubble {\n    background: linear-gradient(135deg, #ffeaa7, #fdcb6e);\n    padding: 2rem;\n    border-radius: 25px;\n    margin: 2rem 0;\n    position: relative;\n    animation: bubbleFloat 3s ease-in-out infinite;\n    box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n}\n\n@keyframes bubbleFloat {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n}\n\n.rumor-bubble::before {\n    content: '💭';\n    font-size: 2rem;\n    position: absolute;\n    top: -10px;\n    left: -10px;\n}\n\n.rumor-text {\n    font-size: 1.2rem;\n    color: #2d3436;\n    font-weight: 500;\n    margin-bottom: 1.5rem;\n}\n\n.rumor-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n.action-btn {\n    padding: 0.8rem 2rem;\n    border: none;\n    border-radius: 50px;\n    cursor: pointer;\n    font-weight: 600;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n    box-shadow: 0 3px 10px rgba(0,0,0,0.1);\n}\n\n.share-btn {\n    background: linear-gradient(135deg, #ff7675, #e17055);\n    color: white;\n}\n\n.verify-btn {\n    background: linear-gradient(135deg, #00cec9, #00b894);\n    color: white;\n}\n\n.ignore-btn {\n    background: linear-gradient(135deg, #636e72, #2d3436);\n    color: white;\n}\n\n.action-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}\n\n/* Filter Bubble Specific */\n.bubble-arena {\n    position: relative;\n    height: 400px;\n    border-radius: 20px;\n    background: linear-gradient(135deg, #a8edea, #fed6e3);\n    overflow: hidden;\n    margin: 2rem 0;\n}\n\n.player-bubble {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-weight: bold;\n    z-index: 10;\n}\n\n.info-bubble {\n    position: absolute;\n    width: 150px;\n    height: 60px;\n    background: rgba(255,255,255,0.9);\n    border-radius: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 0.9rem;\n    text-align: center;\n    padding: 0.5rem;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    animation: drift 8s infinite linear;\n}\n\n.info-bubble:hover {\n    transform: scale(1.05);\n    background: rgba(255,255,255,1);\n}\n\n@keyframes drift {\n    0% { transform: translateX(-200px); }\n    100% { transform: translateX(calc(100vw + 200px)); }\n}\n\n.bubble-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: center;\n    margin-top: 2rem;\n}\n\n.accept-btn {\n    background: linear-gradient(135deg, #00cec9, #00b894);\n    color: white;\n}\n\n.reject-btn {\n    background: linear-gradient(135deg, #ff7675, #e17055);\n    color: white;\n}\n\n.diversity-meter {\n    background: #ecf0f1;\n    height: 20px;\n    border-radius: 10px;\n    margin: 2rem 0;\n    overflow: hidden;\n}\n\n.diversity-fill {\n    height: 100%;\n    background: linear-gradient(90deg, #e74c3c, #f39c12, #27ae60);\n    transition: width 0.5s ease;\n    border-radius: 10px;\n}\n\n/* Digital Detective Specific */\n.evidence-container {\n    background: #2c3e50;\n    color: white;\n    padding: 2rem;\n    border-radius: 15px;\n    margin: 2rem 0;\n    position: relative;\n}\n\n.evidence-container::before {\n    content: '🔍';\n    font-size: 2rem;\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n}\n\n.evidence-card {\n    background: rgba(255,255,255,0.1);\n    padding: 1.5rem;\n    border-radius: 10px;\n    margin-bottom: 1.5rem;\n    border-left: 4px solid #f39c12;\n}\n\n.evidence-title {\n    font-size: 1.3rem;\n    margin-bottom: 1rem;\n    color: #f39c12;\n}\n\n.evidence-content {\n    line-height: 1.6;\n    margin-bottom: 1.5rem;\n}\n\n.evidence-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n.trust-btn {\n    background: linear-gradient(135deg, #27ae60, #2ecc71);\n    color: white;\n}\n\n.investigate-btn {\n    background: linear-gradient(135deg, #f39c12, #e67e22);\n    color: white;\n}\n\n.dismiss-btn {\n    background: linear-gradient(135deg, #e74c3c, #c0392b);\n    color: white;\n}\n\n/* Echo Chamber Specific */\n.chatroom {\n    background: #2c3e50;\n    border-radius: 15px;\n    height: 400px;\n    overflow-y: auto;\n    padding: 1rem;\n    margin: 2rem 0;\n    border: 2px solid #34495e;\n}\n\n.chat-post {\n    background: rgba(255,255,255,0.1);\n    padding: 1rem;\n    border-radius: 10px;\n    margin-bottom: 1rem;\n    color: white;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    border-left: 4px solid transparent;\n}\n\n.chat-post:hover {\n    background: rgba(255,255,255,0.15);\n}\n\n.chat-post.biased {\n    border-left-color: #e74c3c;\n}\n\n.chat-post.balanced {\n    border-left-color: #27ae60;\n}\n\n.post-author {\n    font-weight: bold;\n    color: #3498db;\n    margin-bottom: 0.5rem;\n}\n\n.post-content {\n    line-height: 1.4;\n}\n\n.chat-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: center;\n    margin-top: 1rem;\n}\n\n.support-btn {\n    background: linear-gradient(135deg, #e74c3c, #c0392b);\n    color: white;\n}\n\n.question-btn {\n    background: linear-gradient(135deg, #f39c12, #e67e22);\n    color: white;\n}\n\n.ignore-btn {\n    background: linear-gradient(135deg, #95a5a6, #7f8c8d);\n    color: white;\n}\n\n.echo-meter {\n    background: #ecf0f1;\n    height: 20px;\n    border-radius: 10px;\n    margin: 2rem 0;\n    overflow: hidden;\n}\n\n.echo-fill {\n    height: 100%;\n    background: linear-gradient(90deg, #27ae60, #f39c12, #e74c3c);\n    transition: width 0.5s ease;\n    border-radius: 10px;\n}\n\n/* Game Results */\n.game-result {\n    text-align: center;\n    padding: 2rem;\n    margin: 2rem 0;\n    border-radius: 15px;\n    animation: resultAppear 0.5s ease;\n}\n\n@keyframes resultAppear {\n    from { opacity: 0; transform: scale(0.8); }\n    to { opacity: 1; transform: scale(1); }\n}\n\n.result-correct {\n    background: linear-gradient(135deg, #d4edda, #c3e6cb);\n    color: #155724;\n    border: 2px solid #b8daff;\n}\n\n.result-incorrect {\n    background: linear-gradient(135deg, #f8d7da, #f1b0b7);\n    color: #721c24;\n    border: 2px solid #f5c6cb;\n}\n\n.result-icon {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n}\n\n.result-title {\n    font-size: 1.5rem;\n    font-weight: bold;\n    margin-bottom: 1rem;\n}\n\n.result-explanation {\n    font-size: 1.1rem;\n    line-height: 1.6;\n    margin-bottom: 2rem;\n}\n\n.next-btn {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n    border: none;\n    padding: 1rem 2rem;\n    border-radius: 50px;\n    cursor: pointer;\n    font-size: 1.1rem;\n    transition: all 0.3s ease;\n}\n\n.next-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n}\n\n/* Loading States */\n.loading {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n    padding: 2rem;\n    color: #666;\n}\n\n.spinner {\n    width: 30px;\n    height: 30px;\n    border: 3px solid #ecf0f1;\n    border-top: 3px solid #3498db;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Responsive Game Styles */\n@media (max-width: 768px) {\n    .game-content {\n        padding: 1.5rem;\n    }\n    \n    .rumor-actions,\n    .bubble-actions,\n    .evidence-actions,\n    .chat-actions {\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .action-btn {\n        width: 200px;\n        margin: 0.5rem 0;\n    }\n    \n    .bubble-arena {\n        height: 300px;\n    }\n    \n    .info-bubble {\n        width: 120px;\n        height: 50px;\n        font-size: 0.8rem;\n    }\n    \n    .chatroom {\n        height: 300px;\n    }\n}\n\n@media (max-width: 480px) {\n    .rumor-bubble {\n        padding: 1.5rem;\n    }\n    \n    .rumor-text {\n        font-size: 1rem;\n    }\n    \n    .action-btn {\n        width: 100%;\n        font-size: 0.9rem;\n        padding: 0.7rem 1.5rem;\n    }\n    \n    .evidence-card {\n        padding: 1rem;\n    }\n    \n    .evidence-title {\n        font-size: 1.1rem;\n    }\n}\n","size_bytes":10734},"styles/main.css":{"content":"/* Global Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n    color: #333;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    overflow-x: hidden;\n}\n\n/* Screen Management */\n.screen {\n    display: none;\n    min-height: 100vh;\n    padding: 20px;\n    animation: fadeIn 0.5s ease-in-out;\n}\n\n.screen.active {\n    display: block;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n/* Landing Page */\n.landing-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    text-align: center;\n    max-width: 600px;\n    margin: 0 auto;\n}\n\n.logo-section {\n    margin-bottom: 3rem;\n}\n\n.logo-icon {\n    font-size: 4rem;\n    color: #fff;\n    margin-bottom: 1rem;\n    text-shadow: 0 4px 8px rgba(0,0,0,0.3);\n}\n\n.logo-title {\n    font-size: 3.5rem;\n    font-weight: 700;\n    color: #fff;\n    margin-bottom: 0.5rem;\n    text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n}\n\n.logo-subtitle {\n    font-size: 1.2rem;\n    color: rgba(255,255,255,0.9);\n    margin-bottom: 2rem;\n}\n\n.start-btn {\n    background: linear-gradient(135deg, #ff6b6b, #ee5a52);\n    color: white;\n    border: none;\n    padding: 1rem 2.5rem;\n    font-size: 1.3rem;\n    border-radius: 50px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    margin-bottom: 3rem;\n}\n\n.start-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0,0,0,0.3);\n}\n\n.landing-features {\n    display: flex;\n    gap: 2rem;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\n.feature {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    color: rgba(255,255,255,0.9);\n    font-size: 0.9rem;\n}\n\n.feature i {\n    font-size: 1.2rem;\n    color: #ffd93d;\n}\n\n/* Game Hub */\n.hub-container {\n    max-width: 1200px;\n    margin: 0 auto;\n}\n\n.hub-header {\n    text-align: center;\n    margin-bottom: 3rem;\n}\n\n.hub-header h2 {\n    color: #fff;\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n    text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n}\n\n.progress-display {\n    color: rgba(255,255,255,0.9);\n    font-size: 1.1rem;\n    margin-bottom: 1rem;\n}\n\n.progress-bar {\n    width: 300px;\n    height: 10px;\n    background: rgba(255,255,255,0.3);\n    border-radius: 5px;\n    margin: 0 auto;\n    overflow: hidden;\n}\n\n.progress-fill {\n    height: 100%;\n    background: linear-gradient(90deg, #ffd93d, #ff6b6b);\n    border-radius: 5px;\n    width: 0;\n    transition: width 0.5s ease;\n}\n\n.games-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: 2rem;\n    margin-bottom: 3rem;\n}\n\n.game-card {\n    background: rgba(255,255,255,0.95);\n    border-radius: 20px;\n    padding: 2rem;\n    text-align: center;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 8px 30px rgba(0,0,0,0.1);\n    position: relative;\n    overflow: hidden;\n}\n\n.game-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 15px 40px rgba(0,0,0,0.2);\n}\n\n.game-card.completed {\n    border: 3px solid #4caf50;\n}\n\n.game-icon {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1.5rem;\n    font-size: 2rem;\n    color: white;\n}\n\n.rumorville-icon { background: linear-gradient(135deg, #ff9a9e, #fecfef); }\n.filterbubble-icon { background: linear-gradient(135deg, #a8edea, #fed6e3); }\n.detective-icon { background: linear-gradient(135deg, #4a4a4a, #2c2c2c); }\n.echochamber-icon { background: linear-gradient(135deg, #ff8a00, #e52e71); }\n\n.game-card h3 {\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n    color: #333;\n}\n\n.game-card p {\n    color: #666;\n    margin-bottom: 1.5rem;\n    line-height: 1.4;\n}\n\n.game-status {\n    font-weight: 600;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.game-status.completed {\n    color: #4caf50;\n}\n\n/* Final Summary */\n.final-summary {\n    background: rgba(255,255,255,0.95);\n    border-radius: 20px;\n    padding: 3rem;\n    text-align: center;\n    margin-top: 2rem;\n}\n\n.celebration i {\n    font-size: 4rem;\n    color: #ffd700;\n    margin-bottom: 1rem;\n}\n\n.celebration h2 {\n    color: #333;\n    margin-bottom: 1rem;\n}\n\n.celebration p {\n    color: #666;\n    font-size: 1.1rem;\n    margin-bottom: 2rem;\n}\n\n.restart-btn {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n    border: none;\n    padding: 1rem 2rem;\n    border-radius: 50px;\n    cursor: pointer;\n    font-size: 1.1rem;\n    transition: all 0.3s ease;\n}\n\n.restart-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n}\n\n/* Modal */\n.modal {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0.8);\n    z-index: 1000;\n    animation: modalFadeIn 0.3s ease;\n}\n\n.modal.active {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n@keyframes modalFadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n.modal-content {\n    background: white;\n    border-radius: 20px;\n    max-width: 500px;\n    width: 90%;\n    max-height: 90vh;\n    overflow-y: auto;\n    animation: modalSlideIn 0.3s ease;\n}\n\n@keyframes modalSlideIn {\n    from { transform: translateY(-50px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n}\n\n.flashcard {\n    padding: 2rem;\n}\n\n.flashcard-header {\n    text-align: center;\n    margin-bottom: 2rem;\n    color: #333;\n}\n\n.flashcard-header i {\n    font-size: 2.5rem;\n    color: #ffd93d;\n    margin-bottom: 1rem;\n}\n\n.flashcard-body {\n    margin-bottom: 2rem;\n    line-height: 1.6;\n    color: #555;\n}\n\n.flashcard-footer {\n    text-align: center;\n}\n\n.continue-btn {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n    border: none;\n    padding: 1rem 2rem;\n    border-radius: 50px;\n    cursor: pointer;\n    font-size: 1.1rem;\n    transition: all 0.3s ease;\n}\n\n.continue-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n}\n\n/* Game Common Elements */\n.game-container {\n    max-width: 900px;\n    margin: 0 auto;\n}\n\n.game-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 2rem;\n    background: rgba(255,255,255,0.1);\n    padding: 1rem 2rem;\n    border-radius: 15px;\n    backdrop-filter: blur(10px);\n}\n\n.game-header h2 {\n    color: white;\n    font-size: 1.8rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n}\n\n.back-btn {\n    background: rgba(255,255,255,0.2);\n    color: white;\n    border: none;\n    padding: 0.8rem;\n    border-radius: 50%;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(10px);\n}\n\n.back-btn:hover {\n    background: rgba(255,255,255,0.3);\n    transform: scale(1.05);\n}\n\n.audio-controls {\n    display: flex;\n    gap: 0.5rem;\n}\n\n.audio-toggle {\n    background: rgba(255,255,255,0.2);\n    color: white;\n    border: none;\n    padding: 0.8rem;\n    border-radius: 50%;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(10px);\n}\n\n.audio-toggle:hover {\n    background: rgba(255,255,255,0.3);\n}\n\n.audio-toggle.muted {\n    background: rgba(255,0,0,0.3);\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .logo-title {\n        font-size: 2.5rem;\n    }\n    \n    .games-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .game-header {\n        padding: 1rem;\n        flex-direction: column;\n        gap: 1rem;\n    }\n    \n    .landing-features {\n        flex-direction: column;\n        gap: 1rem;\n    }\n    \n    .hub-header h2 {\n        font-size: 2rem;\n    }\n}\n\n@media (max-width: 480px) {\n    .screen {\n        padding: 10px;\n    }\n    \n    .logo-title {\n        font-size: 2rem;\n    }\n    \n    .start-btn {\n        padding: 0.8rem 2rem;\n        font-size: 1.1rem;\n    }\n    \n    .game-card {\n        padding: 1.5rem;\n    }\n    \n    .flashcard {\n        padding: 1.5rem;\n    }\n}\n","size_bytes":8256},"js/games/digitaldetective.js":{"content":"// Digital Detective Game - Noir-style grayscale background for credibility assessment\nclass DigitalDetectiveGame {\n    constructor() {\n        this.currentCaseIndex = 0;\n        this.correctChoices = 0;\n        this.totalCases = 0;\n        this.gameContainer = document.getElementById('detective-content');\n        this.evidence = [];\n        this.aiIntegration = new AIIntegration();\n    }\n    \n    start() {\n        this.currentCaseIndex = 0;\n        this.correctChoices = 0;\n        \n        // Ensure we have access to fallback stories\n        this.evidence = window.FALLBACK_STORIES?.digitaldetective || [];\n        this.totalCases = Math.min(6, this.evidence.length); // Investigate 6 pieces of evidence\n        \n        console.log('Digital Detective game started with', this.totalCases, 'cases');\n        console.log('First case sample:', this.evidence[0]);\n        \n        this.showIntroduction();\n        \n        // Play detective sound\n        window.playSound('typewriter');\n    }\n    \n    showIntroduction() {\n        const introHtml = `\n            <div style=\"text-align: center;\">\n                <h2 style=\"color: #ecf0f1; margin-bottom: 2rem;\">\n                    <i class=\"fas fa-user-secret\" style=\"color: #f39c12;\"></i>\n                    Digital Detective Bureau\n                </h2>\n                <div style=\"background: linear-gradient(135deg, #2c3e50, #34495e); color: #ecf0f1; padding: 2rem; border-radius: 20px; margin-bottom: 2rem; border: 2px solid #f39c12;\">\n                    <p style=\"font-size: 1.1rem; line-height: 1.6; margin-bottom: 1rem;\">\n                        🕵️ Welcome to the shadowy world of digital investigation. In this noir-inspired challenge, you'll examine suspicious digital evidence.\n                    </p>\n                    <p style=\"font-size: 1rem; margin-bottom: 1rem;\">\n                        <strong>Your Detective Tools:</strong>\n                    </p>\n                    <ul style=\"list-style: none; padding: 0; text-align: left; max-width: 400px; margin: 0 auto;\">\n                        <li style=\"margin: 0.5rem 0;\"><span style=\"color: #27ae60;\">🔍 TRUST</span> - Accept the evidence as credible</li>\n                        <li style=\"margin: 0.5rem 0;\"><span style=\"color: #f39c12;\">🕵️ INVESTIGATE</span> - Dig deeper for verification</li>\n                        <li style=\"margin: 0.5rem 0;\"><span style=\"color: #e74c3c;\">❌ DISMISS</span> - Reject as unreliable</li>\n                    </ul>\n                    <div style=\"background: rgba(243, 156, 18, 0.2); padding: 1rem; border-radius: 10px; margin-top: 1rem;\">\n                        <p style=\"margin: 0; font-style: italic;\">\"In the digital age, a good detective never trusts their first impression.\"</p>\n                    </div>\n                </div>\n                <button class=\"action-btn trust-btn\" onclick=\"digitaldetectiveGame.startInvestigation()\">\n                    Open First Case File <i class=\"fas fa-folder-open\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = introHtml;\n    }\n    \n    startInvestigation() {\n        this.showNextEvidence();\n    }\n    \n    showNextEvidence() {\n        if (this.currentCaseIndex >= this.totalCases) {\n            this.showFinalResults();\n            return;\n        }\n        \n        const evidenceItem = this.evidence[this.currentCaseIndex];\n        if (!evidenceItem) {\n            console.error('No evidence found at index', this.currentCaseIndex, 'Total cases:', this.evidence.length);\n            this.showFinalResults();\n            return;\n        }\n        \n        const evidenceHtml = `\n            <div class=\"detective-case\">\n                <div class=\"case-header\" style=\"text-align: center; margin-bottom: 2rem; color: #ecf0f1;\">\n                    <div style=\"font-size: 1.2rem; margin-bottom: 0.5rem;\">\n                        <i class=\"fas fa-folder\"></i> Case File #${this.currentCaseIndex + 1} of ${this.totalCases}\n                    </div>\n                    <div style=\"color: #f39c12;\">EVIDENCE ANALYSIS REQUIRED</div>\n                </div>\n                \n                <div class=\"evidence-container\">\n                    <div class=\"evidence-card\">\n                        <div class=\"evidence-title\">\n                            <i class=\"fas fa-document-alt\"></i> Digital Evidence\n                        </div>\n                        <div class=\"evidence-content\">\n                            \"${evidenceItem.text}\"\n                        </div>\n                        <div style=\"margin-top: 1rem; padding: 1rem; background: rgba(243, 156, 18, 0.1); border-radius: 8px;\">\n                            <div style=\"color: #f39c12; font-weight: bold; margin-bottom: 0.5rem;\">\n                                <i class=\"fas fa-exclamation-triangle\"></i> Detective's Question:\n                            </div>\n                            <div>How should you handle this piece of digital evidence? Consider its source, content, and potential credibility markers.</div>\n                        </div>\n                    </div>\n                    \n                    <div class=\"evidence-actions\">\n                        <button class=\"action-btn trust-btn\" onclick=\"digitaldetectiveGame.handleChoice('trust')\">\n                            <i class=\"fas fa-thumbs-up\"></i> Trust\n                        </button>\n                        <button class=\"action-btn investigate-btn\" onclick=\"digitaldetectiveGame.handleChoice('investigate')\">\n                            <i class=\"fas fa-search\"></i> Investigate\n                        </button>\n                        <button class=\"action-btn dismiss-btn\" onclick=\"digitaldetectiveGame.handleChoice('dismiss')\">\n                            <i class=\"fas fa-times\"></i> Dismiss\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = evidenceHtml;\n        \n        // Play case opening sound\n        window.playSound('typewriter');\n    }\n    \n    async handleChoice(choice) {\n        const evidenceItem = this.evidence[this.currentCaseIndex];\n        \n        // Show loading while processing\n        this.gameContainer.innerHTML += showLoading('Analyzing evidence credibility...');\n        \n        let result;\n        try {\n            // Try AI credibility analysis\n            result = await this.aiIntegration.analyzeCredibility(evidenceItem.text);\n        } catch (error) {\n            console.log('AI credibility analysis failed, using fallback');\n        }\n        \n        // Use fallback credibility assessment\n        if (!result) {\n            result = {\n                isCredible: evidenceItem.isCredible,\n                confidence: 0.85,\n                reasoning: evidenceItem.explanation,\n                credibilityFactors: evidenceItem.credibilityFactors || []\n            };\n        }\n        \n        // Evaluate the detective's choice\n        const isCorrectChoice = this.evaluateDetectiveChoice(choice, result.isCredible);\n        \n        if (isCorrectChoice) {\n            this.correctChoices++;\n        }\n        \n        this.showInvestigationResult(choice, result, isCorrectChoice);\n    }\n    \n    evaluateDetectiveChoice(choice, isCredible) {\n        // Best practice scoring:\n        // - Always investigate (best choice regardless of credibility)\n        // - Trust credible sources\n        // - Dismiss non-credible sources\n        \n        if (choice === 'investigate') {\n            return true; // Always correct to investigate further\n        } else if (choice === 'trust' && isCredible) {\n            return true; // Correct to trust credible sources\n        } else if (choice === 'dismiss' && !isCredible) {\n            return true; // Correct to dismiss non-credible sources\n        } else {\n            return false; // Wrong judgment\n        }\n    }\n    \n    showInvestigationResult(choice, result, isCorrectChoice) {\n        const evidenceItem = this.evidence[this.currentCaseIndex];\n        \n        let detectiveAnalysis;\n        switch (choice) {\n            case 'trust':\n                detectiveAnalysis = isCorrectChoice ? \n                    \"You trusted credible evidence - good detective instincts!\" :\n                    \"You trusted questionable evidence - always verify suspicious claims!\";\n                break;\n            case 'investigate':\n                detectiveAnalysis = \"Excellent detective work! Investigation is always the best approach for digital evidence.\";\n                break;\n            case 'dismiss':\n                detectiveAnalysis = isCorrectChoice ? \n                    \"Good call! You correctly identified unreliable evidence.\" :\n                    \"You dismissed potentially valid evidence - be careful not to dismiss too quickly!\";\n                break;\n        }\n        \n        const credibilityLabel = result.isCredible ? \"CREDIBLE EVIDENCE\" : \"QUESTIONABLE EVIDENCE\";\n        const credibilityColor = result.isCredible ? \"#27ae60\" : \"#e74c3c\";\n        \n        const resultHtml = `\n            <div class=\"investigation-result\" style=\"color: #ecf0f1;\">\n                <div style=\"background: linear-gradient(135deg, #2c3e50, #34495e); padding: 2rem; border-radius: 20px; border: 2px solid ${isCorrectChoice ? '#27ae60' : '#e74c3c'};\">\n                    <div style=\"text-align: center; margin-bottom: 2rem;\">\n                        <div style=\"font-size: 2.5rem; margin-bottom: 1rem;\">\n                            ${isCorrectChoice ? '🕵️✅' : '🔍❌'}\n                        </div>\n                        <div style=\"font-size: 1.5rem; color: ${credibilityColor}; margin-bottom: 1rem;\">\n                            ${credibilityLabel}\n                        </div>\n                    </div>\n                    \n                    <div style=\"background: rgba(243, 156, 18, 0.1); padding: 1.5rem; border-radius: 15px; margin-bottom: 1.5rem;\">\n                        <h4 style=\"color: #f39c12; margin-bottom: 1rem;\">Detective's Assessment:</h4>\n                        <p style=\"margin-bottom: 1rem;\">${detectiveAnalysis}</p>\n                        <p><strong>Evidence Analysis:</strong> ${result.reasoning || evidenceItem.explanation}</p>\n                    </div>\n                    \n                    <div style=\"background: rgba(255,255,255,0.05); padding: 1rem; border-radius: 10px;\">\n                        <h4 style=\"color: #ecf0f1; margin-bottom: 0.5rem;\">🔍 Professional Tip:</h4>\n                        <p style=\"margin: 0; font-style: italic;\">\n                            Always look for: credible sources, recent dates, corroborating evidence, and expert verification. When in doubt, investigate further!\n                        </p>\n                    </div>\n                </div>\n                \n                <div style=\"text-align: center; margin-top: 2rem;\">\n                    <button class=\"action-btn investigate-btn\" onclick=\"digitaldetectiveGame.nextCase()\">\n                        Next Case File <i class=\"fas fa-arrow-right\"></i>\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = resultHtml;\n        \n        // Play result sound\n        window.playSound(isCorrectChoice ? 'success' : 'typewriter');\n    }\n    \n    nextCase() {\n        this.currentCaseIndex++;\n        this.showNextEvidence();\n    }\n    \n    showFinalResults() {\n        const accuracyRate = Math.round((this.correctChoices / this.totalCases) * 100);\n        let detectiveRank;\n        let rankColor;\n        let badge;\n        let evaluation;\n        \n        if (accuracyRate >= 85) {\n            detectiveRank = \"Master Detective 🕵️‍♀️\";\n            rankColor = \"#f39c12\";\n            badge = \"🏆\";\n            evaluation = \"Outstanding! You have excellent instincts for digital evidence assessment.\";\n        } else if (accuracyRate >= 70) {\n            detectiveRank = \"Skilled Investigator 🔍\";\n            rankColor = \"#27ae60\";\n            badge = \"🥇\";\n            evaluation = \"Well done! Your detective skills are developing nicely.\";\n        } else if (accuracyRate >= 50) {\n            detectiveRank = \"Detective in Training 👮\";\n            rankColor = \"#3498db\";\n            badge = \"🥈\";\n            evaluation = \"You're learning! Keep practicing your evidence evaluation skills.\";\n        } else {\n            detectiveRank = \"Rookie Investigator 👶\";\n            rankColor = \"#e74c3c\";\n            badge = \"🥉\";\n            evaluation = \"Every great detective starts somewhere. Focus on verification techniques!\";\n        }\n        \n        const resultsHtml = `\n            <div class=\"final-results\" style=\"color: #ecf0f1; text-align: center;\">\n                <div style=\"background: linear-gradient(135deg, #2c3e50, #34495e); padding: 3rem; border-radius: 20px; border: 3px solid ${rankColor};\">\n                    <div style=\"font-size: 3rem; margin-bottom: 1rem;\">${badge}</div>\n                    <h2 style=\"color: ${rankColor}; margin-bottom: 1rem;\">\n                        Case Files Closed\n                    </h2>\n                    <div style=\"font-size: 1.8rem; margin-bottom: 2rem;\">${detectiveRank}</div>\n                    \n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin-bottom: 2rem;\">\n                        <div style=\"background: rgba(243, 156, 18, 0.2); padding: 1rem; border-radius: 10px;\">\n                            <div style=\"font-size: 2rem; color: #f39c12;\">📁</div>\n                            <div>Cases Solved</div>\n                            <div style=\"font-size: 1.5rem; font-weight: bold;\">${this.correctChoices}/${this.totalCases}</div>\n                        </div>\n                        <div style=\"background: rgba(243, 156, 18, 0.2); padding: 1rem; border-radius: 10px;\">\n                            <div style=\"font-size: 2rem; color: #f39c12;\">📊</div>\n                            <div>Accuracy Rate</div>\n                            <div style=\"font-size: 1.5rem; font-weight: bold;\">${accuracyRate}%</div>\n                        </div>\n                    </div>\n                    \n                    <div style=\"background: rgba(255,255,255,0.05); padding: 2rem; border-radius: 15px; margin-bottom: 2rem;\">\n                        <h3 style=\"color: #f39c12; margin-bottom: 1rem;\">Final Assessment</h3>\n                        <p style=\"font-size: 1.1rem; line-height: 1.6;\">${evaluation}</p>\n                    </div>\n                    \n                    <div style=\"background: rgba(39, 174, 96, 0.1); padding: 1rem; border-radius: 10px; border-left: 4px solid #27ae60;\">\n                        <p style=\"margin: 0; font-style: italic;\">\"A digital detective's greatest tool is healthy skepticism combined with thorough verification.\"</p>\n                    </div>\n                </div>\n                \n                <button class=\"action-btn trust-btn\" onclick=\"digitaldetectiveGame.complete()\" style=\"margin-top: 2rem;\">\n                    Complete Investigation <i class=\"fas fa-graduation-cap\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = resultsHtml;\n        \n        // Play completion sound\n        window.playSound('completion');\n    }\n    \n    complete() {\n        const accuracyRate = Math.round((this.correctChoices / this.totalCases) * 100);\n        \n        const learningContent = `\n            <h3>🕵️ Digital Detective: Source Credibility Mastery</h3>\n            <div style=\"text-align: left; margin: 1.5rem 0;\">\n                <h4 style=\"color: #2d3436; margin-bottom: 1rem;\">Detective Skills Acquired:</h4>\n                <ul style=\"list-style-type: none; padding: 0;\">\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #f39c12; margin-right: 0.5rem;\">🔍</span>\n                        <div>\n                            <strong>Source Verification:</strong> Always check the author, publication, and institutional backing of information.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #f39c12; margin-right: 0.5rem;\">📅</span>\n                        <div>\n                            <strong>Timeliness Matters:</strong> Check publication dates and ensure information is current and relevant.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #f39c12; margin-right: 0.5rem;\">🔗</span>\n                        <div>\n                            <strong>Cross-Reference Everything:</strong> Look for multiple independent sources confirming the same information.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #f39c12; margin-right: 0.5rem;\">⚠️</span>\n                        <div>\n                            <strong>Red Flags Recognition:</strong> Be wary of sensational headlines, emotional language, and unsupported claims.\n                        </div>\n                    </li>\n                </ul>\n                <div style=\"background: #e8f4f8; padding: 1rem; border-radius: 10px; margin-top: 1.5rem; border-left: 4px solid #f39c12;\">\n                    <strong>Your Detective Badge:</strong> ${accuracyRate}% Accuracy Rate - ${this.getDetectiveAdvice(accuracyRate)}\n                </div>\n                <div style=\"margin-top: 1rem; padding: 1rem; background: #2c3e50; color: white; border-radius: 10px; text-align: center;\">\n                    <em>\"In the digital age, every citizen must be their own detective.\"</em>\n                </div>\n            </div>\n        `;\n        \n        window.completeGame('digitaldetective', learningContent);\n    }\n    \n    getDetectiveAdvice(accuracy) {\n        if (accuracy >= 85) {\n            return \"You're ready to tackle any digital misinformation!\";\n        } else if (accuracy >= 70) {\n            return \"Great work! Keep practicing these verification skills.\";\n        } else if (accuracy >= 50) {\n            return \"You're improving! Remember: when in doubt, investigate.\";\n        } else {\n            return \"Keep learning! Start with basic source checking techniques.\";\n        }\n    }\n    \n    reset() {\n        this.currentCaseIndex = 0;\n        this.correctChoices = 0;\n        this.gameContainer.innerHTML = '';\n    }\n}\n\n// Initialize game instance\nconst digitaldetectiveGame = new DigitalDetectiveGame();\n","size_bytes":18962},"js/games/echochamber.js":{"content":"// Echo Chamber Escape Game - Chatroom simulation with bias detection\nclass EchoChamberGame {\n    constructor() {\n        this.currentPostIndex = 0;\n        this.echoScore = 0; // Starts at 0, increases with bias\n        this.correctChoices = 0;\n        this.totalPosts = 0;\n        this.gameContainer = document.getElementById('echochamber-content');\n        this.chatPosts = [];\n        this.aiIntegration = new AIIntegration();\n        this.chatHistory = [];\n    }\n    \n    start() {\n        this.currentPostIndex = 0;\n        this.echoScore = 0;\n        this.correctChoices = 0;\n        this.chatHistory = [];\n        \n        // Ensure we have access to fallback stories\n        this.chatPosts = window.FALLBACK_STORIES?.echochamber || [];\n        this.totalPosts = Math.min(7, this.chatPosts.length); // Analyze 7 chat posts\n        \n        console.log('Echo Chamber Escape game started with', this.totalPosts, 'posts');\n        console.log('First post sample:', this.chatPosts[0]);\n        \n        this.showIntroduction();\n        \n        // Play techno start sound\n        window.playSound('ping');\n    }\n    \n    showIntroduction() {\n        const introHtml = `\n            <div style=\"text-align: center;\">\n                <h2 style=\"color: #2d3436; margin-bottom: 2rem;\">\n                    <i class=\"fas fa-comments-dollar\" style=\"color: #ee5a6f;\"></i>\n                    Echo Chamber Escape Room\n                </h2>\n                <div style=\"background: linear-gradient(135deg, #ee5a6f, #f29263); color: white; padding: 2rem; border-radius: 20px; margin-bottom: 2rem;\">\n                    <p style=\"font-size: 1.1rem; line-height: 1.6; margin-bottom: 1rem;\">\n                        💬 You've stumbled into an online discussion forum. The conversations seem intense, and you notice some concerning patterns...\n                    </p>\n                    <p style=\"font-size: 1rem; margin-bottom: 1rem;\">\n                        <strong>Your Mission:</strong> Navigate the discussion wisely. You can:\n                    </p>\n                    <ul style=\"list-style: none; padding: 0; text-align: left; max-width: 400px; margin: 0 auto;\">\n                        <li style=\"margin: 0.5rem 0;\"><span style=\"color: #e74c3c;\">👍 SUPPORT</span> - Agree with the post</li>\n                        <li style=\"margin: 0.5rem 0;\"><span style=\"color: #f39c12;\">❓ QUESTION</span> - Ask for evidence or nuance</li>\n                        <li style=\"margin: 0.5rem 0;\"><span style=\"color: #95a5a6;\">🤐 IGNORE</span> - Don't engage</li>\n                    </ul>\n                    <div style=\"background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 10px; margin-top: 1rem;\">\n                        <p style=\"margin: 0;\"><strong>Watch the Echo Meter:</strong> Supporting biased content traps you deeper in the chamber!</p>\n                    </div>\n                </div>\n                <button class=\"action-btn question-btn\" onclick=\"echochamberGame.enterChatroom()\">\n                    Enter the Discussion <i class=\"fas fa-sign-in-alt\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = introHtml;\n    }\n    \n    enterChatroom() {\n        this.showChatroom();\n        this.loadNextPost();\n    }\n    \n    showChatroom() {\n        const chatroomHtml = `\n            <div class=\"echo-chamber-interface\">\n                <div class=\"chatroom-header\" style=\"text-align: center; margin-bottom: 1rem; color: #2d3436;\">\n                    <div style=\"font-size: 1.1rem; margin-bottom: 0.5rem;\">\n                        <i class=\"fas fa-users\"></i> Discussion Post ${this.currentPostIndex + 1} of ${this.totalPosts}\n                    </div>\n                    <div style=\"background: #2c3e50; color: white; padding: 0.5rem 1rem; border-radius: 20px; display: inline-block;\">\n                        <span>Echo Level: </span>\n                        <span style=\"color: ${this.getEchoColor()}; font-weight: bold;\">${this.echoScore}%</span>\n                    </div>\n                </div>\n                \n                <div class=\"chatroom\" id=\"chatroom\">\n                    ${this.renderChatHistory()}\n                    <div id=\"current-post\" class=\"chat-post\" style=\"border: 2px solid #ee5a6f; animation: newMessage 0.5s ease;\">\n                        <!-- Current post will be loaded here -->\n                    </div>\n                </div>\n                \n                <div class=\"echo-meter\">\n                    <div class=\"echo-fill\" style=\"width: ${this.echoScore}%;\"></div>\n                </div>\n                \n                <div class=\"chat-actions\" id=\"chat-actions\">\n                    <button class=\"action-btn support-btn\" onclick=\"echochamberGame.handleChoice('support')\">\n                        <i class=\"fas fa-thumbs-up\"></i> Support\n                    </button>\n                    <button class=\"action-btn question-btn\" onclick=\"echochamberGame.handleChoice('question')\">\n                        <i class=\"fas fa-question-circle\"></i> Question\n                    </button>\n                    <button class=\"action-btn ignore-btn\" onclick=\"echochamberGame.handleChoice('ignore')\">\n                        <i class=\"fas fa-eye-slash\"></i> Ignore\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = chatroomHtml;\n    }\n    \n    renderChatHistory() {\n        return this.chatHistory.map((post, index) => `\n            <div class=\"chat-post ${post.biasLevel}\" style=\"opacity: 0.7; border-left-color: ${post.biasLevel === 'biased' ? '#e74c3c' : '#27ae60'};\">\n                <div class=\"post-author\">User${index + 1}</div>\n                <div class=\"post-content\">${post.text}</div>\n                <div style=\"font-size: 0.8rem; color: #bdc3c7; margin-top: 0.5rem;\">\n                    Your response: ${post.userChoice}\n                </div>\n            </div>\n        `).join('');\n    }\n    \n    loadNextPost() {\n        if (this.currentPostIndex >= this.totalPosts) {\n            this.showFinalResults();\n            return;\n        }\n        \n        const post = this.chatPosts[this.currentPostIndex];\n        if (!post) {\n            console.error('No post found at index', this.currentPostIndex, 'Total posts:', this.chatPosts.length);\n            this.showFinalResults();\n            return;\n        }\n        \n        const currentPostEl = document.getElementById('current-post');\n        \n        if (currentPostEl) {\n            currentPostEl.innerHTML = `\n                <div class=\"post-author\" style=\"color: #3498db;\">\n                    <i class=\"fas fa-user-circle\"></i> ForumUser${Math.floor(Math.random() * 999) + 1}\n                </div>\n                <div class=\"post-content\">${post.text}</div>\n                <div style=\"margin-top: 1rem; padding: 0.5rem; background: rgba(238, 90, 111, 0.1); border-radius: 5px; font-size: 0.9rem;\">\n                    <i class=\"fas fa-exclamation-circle\" style=\"color: #ee5a6f;\"></i>\n                    How do you respond to this statement?\n                </div>\n            `;\n        }\n        \n        // Play notification sound\n        window.playSound('ping');\n    }\n    \n    async handleChoice(choice) {\n        const post = this.chatPosts[this.currentPostIndex];\n        const actions = document.getElementById('chat-actions');\n        actions.style.pointerEvents = 'none';\n        \n        // Show loading\n        this.gameContainer.innerHTML += showLoading('Analyzing discussion dynamics...');\n        \n        let result;\n        try {\n            // Try AI bias analysis\n            result = await this.aiIntegration.analyzeBias(post.text);\n        } catch (error) {\n            console.log('AI bias analysis failed, using fallback');\n        }\n        \n        // Use fallback bias assessment\n        if (!result) {\n            result = {\n                biasLevel: post.biasLevel,\n                biasType: post.biasType || 'confirmation',\n                confidence: 0.8,\n                reasoning: post.explanation\n            };\n        }\n        \n        // Process the choice\n        this.processChoice(choice, result, post);\n    }\n    \n    processChoice(choice, result, post) {\n        let echoImpact = 0;\n        let feedback;\n        let isGoodChoice = false;\n        \n        const isBiased = result.biasLevel === 'biased' || result.biasLevel === 'Biased';\n        \n        switch (choice) {\n            case 'support':\n                if (isBiased) {\n                    echoImpact = 15; // Supporting bias increases echo chamber\n                    feedback = \"You supported a biased statement, reinforcing the echo chamber effect!\";\n                    isGoodChoice = false;\n                } else {\n                    echoImpact = 0; // Supporting balanced content is neutral\n                    feedback = \"You supported balanced content - but questioning is always valuable!\";\n                    isGoodChoice = true;\n                }\n                break;\n                \n            case 'question':\n                if (isBiased) {\n                    echoImpact = -10; // Questioning bias reduces echo chamber\n                    feedback = \"Great! You questioned biased content and promoted critical thinking!\";\n                    isGoodChoice = true;\n                } else {\n                    echoImpact = -5; // Questioning balanced content still promotes discourse\n                    feedback = \"Good approach! Even balanced content benefits from thoughtful questions.\";\n                    isGoodChoice = true;\n                }\n                break;\n                \n            case 'ignore':\n                echoImpact = 5; // Ignoring contributes slightly to echo chamber\n                feedback = \"You stayed silent. Sometimes this avoids conflict, but it can allow bias to spread.\";\n                isGoodChoice = false;\n                break;\n        }\n        \n        // Update echo score (0-100 range)\n        this.echoScore = Math.max(0, Math.min(100, this.echoScore + echoImpact));\n        \n        if (isGoodChoice) {\n            this.correctChoices++;\n        }\n        \n        // Add to chat history\n        this.chatHistory.push({\n            text: post.text,\n            biasLevel: isBiased ? 'biased' : 'balanced',\n            userChoice: choice.charAt(0).toUpperCase() + choice.slice(1)\n        });\n        \n        this.showPostResult(choice, result, feedback, echoImpact, isGoodChoice);\n    }\n    \n    showPostResult(choice, result, feedback, echoImpact, isGoodChoice) {\n        const impactText = echoImpact === 0 ? 'No change' : \n                          echoImpact > 0 ? `+${echoImpact}%` : `${echoImpact}%`;\n        \n        const biasLabel = result.biasLevel === 'biased' || result.biasLevel === 'Biased' ? \n                         \"BIASED CONTENT\" : \"BALANCED CONTENT\";\n        const biasColor = result.biasLevel === 'biased' || result.biasLevel === 'Biased' ? \n                         \"#e74c3c\" : \"#27ae60\";\n        \n        const resultHtml = `\n            <div class=\"post-analysis\" style=\"text-align: center; padding: 2rem;\">\n                <div style=\"background: linear-gradient(135deg, #2c3e50, #34495e); color: white; padding: 2rem; border-radius: 20px; margin-bottom: 2rem;\">\n                    <div style=\"font-size: 2.5rem; margin-bottom: 1rem;\">\n                        ${isGoodChoice ? '🎯' : '📢'}\n                    </div>\n                    <h3 style=\"color: ${biasColor}; margin-bottom: 1rem;\">${biasLabel}</h3>\n                    \n                    <div style=\"background: rgba(238, 90, 111, 0.2); padding: 1.5rem; border-radius: 15px; margin-bottom: 1.5rem;\">\n                        <h4 style=\"color: #ee5a6f; margin-bottom: 1rem;\">Discussion Impact:</h4>\n                        <p style=\"margin-bottom: 1rem;\">${feedback}</p>\n                        <p><strong>Analysis:</strong> ${result.reasoning}</p>\n                    </div>\n                    \n                    <div class=\"echo-change\" style=\"font-size: 1.2rem; margin-bottom: 1rem;\">\n                        <span style=\"color: #ecf0f1;\">Echo Chamber Level: </span>\n                        <span style=\"color: ${this.getEchoColor()}; font-weight: bold;\">${this.echoScore}%</span>\n                        <span style=\"color: ${echoImpact >= 0 ? '#e74c3c' : '#27ae60'};\">(${impactText})</span>\n                    </div>\n                    \n                    <div class=\"echo-meter\">\n                        <div class=\"echo-fill\" style=\"width: ${this.echoScore}%;\"></div>\n                    </div>\n                    \n                    <div style=\"background: rgba(255,255,255,0.05); padding: 1rem; border-radius: 10px; margin-top: 1rem;\">\n                        <p style=\"margin: 0; font-style: italic; color: #bdc3c7;\">\n                            💡 Pro tip: Question biased statements to promote healthy discourse and prevent echo chambers!\n                        </p>\n                    </div>\n                </div>\n                <button class=\"action-btn question-btn\" onclick=\"echochamberGame.nextPost()\">\n                    Continue Discussion <i class=\"fas fa-arrow-right\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = resultHtml;\n        \n        // Play appropriate sound\n        window.playSound(isGoodChoice ? 'unlock' : 'ping');\n    }\n    \n    nextPost() {\n        this.currentPostIndex++;\n        this.showChatroom();\n        this.loadNextPost();\n    }\n    \n    getEchoColor() {\n        if (this.echoScore <= 30) return '#27ae60'; // Green - healthy discourse\n        if (this.echoScore <= 60) return '#f39c12'; // Orange - getting echo-y\n        return '#e74c3c'; // Red - echo chamber\n    }\n    \n    showFinalResults() {\n        const questionRate = Math.round((this.correctChoices / this.totalPosts) * 100);\n        let escapeStatus;\n        let statusColor;\n        let statusIcon;\n        let evaluation;\n        \n        if (this.echoScore <= 30 && questionRate >= 70) {\n            escapeStatus = \"Echo Chamber Escaped! 🎉\";\n            statusColor = \"#27ae60\";\n            statusIcon = \"🚪✨\";\n            evaluation = \"Brilliant! You promoted healthy discourse and avoided the echo chamber trap.\";\n        } else if (this.echoScore <= 50) {\n            escapeStatus = \"Partially Escaped 🤔\";\n            statusColor = \"#f39c12\";\n            statusIcon = \"🚪\";\n            evaluation = \"Good effort! You're learning to recognize bias, but keep practicing questioning techniques.\";\n        } else {\n            escapeStatus = \"Trapped in Echo Chamber 📢\";\n            statusColor = \"#e74c3c\";\n            statusIcon = \"🔒\";\n            evaluation = \"The echo chamber has you! Remember to question biased statements and promote diverse perspectives.\";\n        }\n        \n        const resultsHtml = `\n            <div class=\"final-results\" style=\"text-align: center;\">\n                <div style=\"background: linear-gradient(135deg, #ee5a6f, #f29263); color: white; padding: 3rem; border-radius: 20px; margin-bottom: 2rem;\">\n                    <div style=\"font-size: 3rem; margin-bottom: 1rem;\">${statusIcon}</div>\n                    <h2 style=\"margin-bottom: 1rem;\">Discussion Complete</h2>\n                    <div style=\"font-size: 1.8rem; color: ${statusColor}; margin-bottom: 2rem;\">${escapeStatus}</div>\n                    \n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin-bottom: 2rem;\">\n                        <div style=\"background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 10px;\">\n                            <div style=\"font-size: 2rem;\">📢</div>\n                            <div>Final Echo Level</div>\n                            <div style=\"font-size: 1.5rem; font-weight: bold; color: ${this.getEchoColor()};\">${this.echoScore}%</div>\n                        </div>\n                        <div style=\"background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 10px;\">\n                            <div style=\"font-size: 2rem;\">❓</div>\n                            <div>Critical Thinking</div>\n                            <div style=\"font-size: 1.5rem; font-weight: bold;\">${questionRate}%</div>\n                        </div>\n                        <div style=\"background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 10px;\">\n                            <div style=\"font-size: 2rem;\">💬</div>\n                            <div>Posts Analyzed</div>\n                            <div style=\"font-size: 1.5rem; font-weight: bold;\">${this.totalPosts}</div>\n                        </div>\n                    </div>\n                    \n                    <div style=\"background: rgba(255,255,255,0.1); padding: 2rem; border-radius: 15px; margin-bottom: 2rem;\">\n                        <h3 style=\"margin-bottom: 1rem;\">Escape Room Analysis</h3>\n                        <p style=\"font-size: 1.1rem; line-height: 1.6;\">${evaluation}</p>\n                    </div>\n                    \n                    <div style=\"background: rgba(39, 174, 96, 0.2); padding: 1rem; border-radius: 10px;\">\n                        <p style=\"margin: 0; font-style: italic;\">\"The best way to escape an echo chamber is to question everything, including your own beliefs.\"</p>\n                    </div>\n                </div>\n                \n                <button class=\"action-btn support-btn\" onclick=\"echochamberGame.complete()\">\n                    Exit Discussion Room <i class=\"fas fa-graduation-cap\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = resultsHtml;\n        \n        // Play completion sound\n        window.playSound('completion');\n    }\n    \n    complete() {\n        const questionRate = Math.round((this.correctChoices / this.totalPosts) * 100);\n        \n        const learningContent = `\n            <h3>📢 Echo Chamber Escape: Bias Recognition Mastery</h3>\n            <div style=\"text-align: left; margin: 1.5rem 0;\">\n                <h4 style=\"color: #2d3436; margin-bottom: 1rem;\">Escape Skills Mastered:</h4>\n                <ul style=\"list-style-type: none; padding: 0;\">\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #ee5a6f; margin-right: 0.5rem;\">❓</span>\n                        <div>\n                            <strong>Question Bias:</strong> Always ask for evidence when encountering extreme or emotional statements.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #ee5a6f; margin-right: 0.5rem;\">👂</span>\n                        <div>\n                            <strong>Listen for Balance:</strong> Healthy discussions include nuance, multiple perspectives, and acknowledgment of complexity.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #ee5a6f; margin-right: 0.5rem;\">🔍</span>\n                        <div>\n                            <strong>Identify Red Flags:</strong> Absolute statements, us-vs-them language, and emotional manipulation indicate bias.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #ee5a6f; margin-right: 0.5rem;\">🌉</span>\n                        <div>\n                            <strong>Bridge Building:</strong> Promote understanding by asking clarifying questions rather than attacking positions.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #ee5a6f; margin-right: 0.5rem;\">🧠</span>\n                        <div>\n                            <strong>Critical Thinking:</strong> Pause before reacting emotionally. Consider: \"What evidence supports this claim?\"\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #ee5a6f; margin-right: 0.5rem;\">🎯</span>\n                        <div>\n                            <strong>Avoid Echo Chambers:</strong> Actively seek out diverse perspectives, even if they challenge your views.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #ee5a6f; margin-right: 0.5rem;\">⚖️</span>\n                        <div>\n                            <strong>Fact vs Opinion:</strong> Learn to distinguish between factual claims and personal opinions in discussions.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #ee5a6f; margin-right: 0.5rem;\">🤝</span>\n                        <div>\n                            <strong>Respectful Disagreement:</strong> You can challenge ideas without attacking the person expressing them.\n                        </div>\n                    </li>\n                </ul>\n                <div style=\"background: #e8f4f8; padding: 1rem; border-radius: 10px; margin-top: 1.5rem; border-left: 4px solid #ee5a6f;\">\n                    <strong>Your Escape Rating:</strong> ${questionRate}% Critical Thinking - ${this.getEscapeAdvice()}\n                </div>\n                <div style=\"background: #2c3e50; color: white; padding: 1rem; border-radius: 10px; margin-top: 1rem;\">\n                    <div style=\"text-align: center;\">\n                        <strong>Final Echo Level: ${this.echoScore}%</strong><br>\n                        <em>${this.getEchoAdvice()}</em>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        window.completeGame('echochamber', learningContent);\n    }\n    \n    getEscapeAdvice() {\n        if (this.echoScore <= 30) {\n            return \"Master of discourse! You avoided the echo chamber completely.\";\n        } else if (this.echoScore <= 50) {\n            return \"Good awareness! Keep practicing bias recognition.\";\n        } else {\n            return \"Learning opportunity! Focus on questioning techniques.\";\n        }\n    }\n    \n    getEchoAdvice() {\n        if (this.echoScore <= 30) {\n            return \"You maintained healthy, diverse discourse throughout!\";\n        } else if (this.echoScore <= 60) {\n            return \"Some echo chamber effects, but you showed good awareness.\";\n        } else {\n            return \"Strong echo chamber influence - practice questioning bias more.\";\n        }\n    }\n    \n    reset() {\n        this.currentPostIndex = 0;\n        this.echoScore = 0;\n        this.correctChoices = 0;\n        this.chatHistory = [];\n        this.gameContainer.innerHTML = '';\n    }\n}\n\n// Initialize game instance\nconst echochamberGame = new EchoChamberGame();\n","size_bytes":23418},"js/games/filterbubble.js":{"content":"// Filter Bubble Simulator - Abstract surreal UI with drifting bubbles\nclass FilterBubbleGame {\n    constructor() {\n        this.currentRound = 0;\n        this.totalRounds = 6;\n        this.diversityScore = 100; // Starts at 100%, decreases with rejections\n        this.acceptedCount = 0;\n        this.rejectedCount = 0;\n        this.gameContainer = document.getElementById('filterbubble-content');\n        this.infoBubbles = [];\n        this.aiIntegration = new AIIntegration();\n        this.driftingBubbles = [];\n    }\n    \n    start() {\n        this.currentRound = 0;\n        this.diversityScore = 100;\n        this.acceptedCount = 0;\n        this.rejectedCount = 0;\n        this.driftingBubbles = [];\n        \n        // Ensure we have access to fallback stories\n        this.infoBubbles = window.FALLBACK_STORIES?.filterbubble || [];\n        this.totalRounds = Math.min(6, this.infoBubbles.length);\n        \n        console.log('Filter Bubble Simulator started with', this.totalRounds, 'bubbles');\n        console.log('First bubble sample:', this.infoBubbles[0]);\n        \n        this.showIntroduction();\n        \n        // Play ambient start sound\n        window.playSound('chime');\n    }\n    \n    showIntroduction() {\n        const introHtml = `\n            <div style=\"text-align: center;\">\n                <h2 style=\"color: #2d3436; margin-bottom: 2rem;\">\n                    <i class=\"fas fa-globe\" style=\"color: #667eea;\"></i>\n                    Filter Bubble Simulator\n                </h2>\n                <div style=\"background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 2rem; border-radius: 20px; margin-bottom: 2rem;\">\n                    <p style=\"font-size: 1.1rem; line-height: 1.6; margin-bottom: 1rem;\">\n                        🫧 You are floating in an information space where content bubbles drift toward you. Your choices shape what you see next!\n                    </p>\n                    <p style=\"font-size: 1rem; margin-bottom: 1rem;\">\n                        <strong>How it works:</strong> Accept information you want to see more of, or reject content you find uninteresting.\n                    </p>\n                    <div style=\"background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px;\">\n                        <p style=\"margin: 0;\"><strong>Watch your Diversity Meter:</strong> Rejecting too much narrows your information diet!</p>\n                    </div>\n                </div>\n                <button class=\"action-btn accept-btn\" onclick=\"filterbubbleGame.startSimulation()\">\n                    Enter the Information Space <i class=\"fas fa-arrow-right\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = introHtml;\n    }\n    \n    startSimulation() {\n        this.showBubbleArena();\n        this.launchNextBubble();\n    }\n    \n    showBubbleArena() {\n        const arenaHtml = `\n            <div class=\"bubble-simulation\">\n                <div class=\"simulation-header\" style=\"text-align: center; margin-bottom: 1rem;\">\n                    <div style=\"color: #2d3436; font-size: 1.1rem; margin-bottom: 0.5rem;\">\n                        Information Bubble ${this.currentRound + 1} of ${this.totalRounds}\n                    </div>\n                    <div style=\"background: #ecf0f1; padding: 0.5rem 1rem; border-radius: 20px; display: inline-block;\">\n                        <span style=\"color: #636e72;\">Diversity: </span>\n                        <span style=\"color: ${this.getDiversityColor()}; font-weight: bold;\">${this.diversityScore}%</span>\n                    </div>\n                </div>\n                \n                <div class=\"bubble-arena\" id=\"bubble-arena\">\n                    <div class=\"player-bubble\">\n                        YOU\n                    </div>\n                    <div id=\"floating-info-bubble\" class=\"info-bubble\" style=\"display: none;\"></div>\n                </div>\n                \n                <div class=\"diversity-meter\">\n                    <div class=\"diversity-fill\" style=\"width: ${this.diversityScore}%;\"></div>\n                </div>\n                \n                <div class=\"bubble-actions\" id=\"bubble-actions\" style=\"display: none;\">\n                    <button class=\"action-btn accept-btn\" onclick=\"filterbubbleGame.handleChoice('accept')\">\n                        <i class=\"fas fa-thumbs-up\"></i> Accept\n                    </button>\n                    <button class=\"action-btn reject-btn\" onclick=\"filterbubbleGame.handleChoice('reject')\">\n                        <i class=\"fas fa-thumbs-down\"></i> Reject\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = arenaHtml;\n    }\n    \n    launchNextBubble() {\n        if (this.currentRound >= this.totalRounds) {\n            this.showFinalResults();\n            return;\n        }\n        \n        const infoBubble = this.infoBubbles[this.currentRound];\n        if (!infoBubble) {\n            console.error('No info bubble found at index', this.currentRound, 'Total bubbles:', this.infoBubbles.length);\n            this.showFinalResults();\n            return;\n        }\n        \n        const floatingBubble = document.getElementById('floating-info-bubble');\n        const actions = document.getElementById('bubble-actions');\n        \n        // Position bubble randomly on the left side\n        const startY = Math.random() * 60 + 20; // Between 20% and 80%\n        floatingBubble.style.top = `${startY}%`;\n        floatingBubble.style.left = '-200px';\n        floatingBubble.textContent = infoBubble.text;\n        floatingBubble.style.display = 'flex';\n        \n        // Animate bubble floating across (slowed down for better readability)\n        setTimeout(() => {\n            floatingBubble.style.transition = 'left 8s linear';\n            floatingBubble.style.left = 'calc(50% - 75px)'; // Stop near center\n        }, 100);\n        \n        // Show actions when bubble reaches center\n        setTimeout(() => {\n            floatingBubble.style.transition = 'none';\n            actions.style.display = 'flex';\n            \n            // Auto-continue if no choice made within 15 seconds\n            setTimeout(() => {\n                if (actions.style.display === 'flex') {\n                    this.handleChoice('ignore');\n                }\n            }, 15000);\n        }, 4100);\n        \n        // Play bubble sound\n        window.playSound('chime');\n    }\n    \n    async handleChoice(choice) {\n        const infoBubble = this.infoBubbles[this.currentRound];\n        const actions = document.getElementById('bubble-actions');\n        actions.style.display = 'none';\n        \n        // Show loading\n        this.gameContainer.innerHTML += showLoading('Analyzing information bubble...');\n        \n        let result;\n        try {\n            // Try AI sentiment analysis\n            result = await this.aiIntegration.analyzeSentiment(infoBubble.text);\n        } catch (error) {\n            console.log('AI sentiment analysis failed, using fallback');\n        }\n        \n        // Use fallback sentiment\n        if (!result) {\n            result = {\n                sentiment: infoBubble.sentiment,\n                confidence: 0.8,\n                reasoning: `This content expresses ${infoBubble.sentiment.toLowerCase()} sentiment.`\n            };\n        }\n        \n        // Process choice\n        this.processChoice(choice, result);\n    }\n    \n    processChoice(choice, result) {\n        const infoBubble = this.infoBubbles[this.currentRound];\n        let feedback;\n        let diversityImpact = 0;\n        \n        if (choice === 'accept') {\n            this.acceptedCount++;\n            feedback = \"You've accepted this information. Your future feed will include more similar content.\";\n            \n            // Accepting only positive content reduces diversity\n            if (result.sentiment === 'Positive' || result.sentiment === 'Neutral') {\n                diversityImpact = 0; // No penalty for balanced content\n            } else {\n                diversityImpact = -5; // Small penalty for accepting negative content\n            }\n        } else if (choice === 'reject') {\n            this.rejectedCount++;\n            feedback = \"You've rejected this information. Your bubble narrows, filtering out similar perspectives.\";\n            \n            // Rejecting content always reduces diversity\n            diversityImpact = -10;\n        } else {\n            feedback = \"You ignored this bubble - sometimes the best choice when unsure!\";\n            diversityImpact = -2; // Small penalty for inaction\n        }\n        \n        // Update diversity score\n        this.diversityScore = Math.max(0, this.diversityScore + diversityImpact);\n        \n        this.showRoundResult(choice, result, feedback, diversityImpact);\n    }\n    \n    showRoundResult(choice, result, feedback, diversityImpact) {\n        const impactText = diversityImpact === 0 ? 'No change' : \n                          diversityImpact > 0 ? `+${diversityImpact}%` : `${diversityImpact}%`;\n        \n        const resultHtml = `\n            <div class=\"bubble-result\" style=\"text-align: center; padding: 2rem;\">\n                <div style=\"background: linear-gradient(135deg, #a8edea, #fed6e3); padding: 2rem; border-radius: 20px; margin-bottom: 2rem;\">\n                    <h3 style=\"color: #2d3436; margin-bottom: 1rem;\">\n                        Information Processed\n                    </h3>\n                    <div style=\"background: rgba(255,255,255,0.8); padding: 1.5rem; border-radius: 15px; margin-bottom: 1rem;\">\n                        <p><strong>Your Choice:</strong> ${choice.charAt(0).toUpperCase() + choice.slice(1)}</p>\n                        <p><strong>Content Type:</strong> ${result.sentiment} sentiment</p>\n                        <p><strong>Impact:</strong> ${feedback}</p>\n                    </div>\n                    <div class=\"diversity-change\" style=\"font-size: 1.2rem; margin-bottom: 1rem;\">\n                        <span style=\"color: #636e72;\">Diversity Score: </span>\n                        <span style=\"color: ${this.getDiversityColor()}; font-weight: bold;\">${this.diversityScore}%</span>\n                        <span style=\"color: ${diversityImpact >= 0 ? '#27ae60' : '#e74c3c'};\">(${impactText})</span>\n                    </div>\n                    <div class=\"diversity-meter\">\n                        <div class=\"diversity-fill\" style=\"width: ${this.diversityScore}%;\"></div>\n                    </div>\n                </div>\n                <button class=\"action-btn accept-btn\" onclick=\"filterbubbleGame.nextRound()\">\n                    Next Information Bubble <i class=\"fas fa-arrow-right\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = resultHtml;\n        \n        // Play impact sound\n        window.playSound(diversityImpact < 0 ? 'thud' : 'chime');\n    }\n    \n    nextRound() {\n        this.currentRound++;\n        this.showBubbleArena();\n        this.launchNextBubble();\n    }\n    \n    getDiversityColor() {\n        if (this.diversityScore >= 70) return '#27ae60';\n        if (this.diversityScore >= 40) return '#f39c12';\n        return '#e74c3c';\n    }\n    \n    showFinalResults() {\n        let bubbleType;\n        let bubbleColor;\n        let warning;\n        \n        if (this.diversityScore >= 70) {\n            bubbleType = \"Open Information Ecosystem 🌐\";\n            bubbleColor = \"#27ae60\";\n            warning = \"Great job! You maintained a diverse information diet and avoided the filter bubble trap.\";\n        } else if (this.diversityScore >= 40) {\n            bubbleType = \"Narrowing Bubble 🫧\";\n            bubbleColor = \"#f39c12\";\n            warning = \"Your information space is getting more limited. Try accepting diverse viewpoints to expand your perspective.\";\n        } else {\n            bubbleType = \"Echo Chamber Alert! 📢\";\n            bubbleColor = \"#e74c3c\";\n            warning = \"You're trapped in a filter bubble! Your information diet has become very narrow, which can lead to polarization.\";\n        }\n        \n        const acceptanceRate = Math.round((this.acceptedCount / this.totalRounds) * 100);\n        const rejectionRate = Math.round((this.rejectedCount / this.totalRounds) * 100);\n        \n        const resultsHtml = `\n            <div class=\"final-results\" style=\"text-align: center;\">\n                <div style=\"background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 2rem; border-radius: 20px; margin-bottom: 2rem;\">\n                    <h2 style=\"margin-bottom: 1rem;\">\n                        <i class=\"fas fa-chart-line\"></i> Filter Bubble Analysis Complete\n                    </h2>\n                    <div style=\"font-size: 1.8rem; margin-bottom: 1rem;\">${bubbleType}</div>\n                    <div style=\"font-size: 1.5rem; color: ${bubbleColor}; margin-bottom: 2rem;\">\n                        Final Diversity: ${this.diversityScore}%\n                    </div>\n                    \n                    <div style=\"background: rgba(255,255,255,0.1); padding: 1.5rem; border-radius: 15px; margin-bottom: 1rem;\">\n                        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem;\">\n                            <div>\n                                <div style=\"font-size: 2rem; color: #00cec9;\">✅</div>\n                                <div>Accepted: ${acceptanceRate}%</div>\n                            </div>\n                            <div>\n                                <div style=\"font-size: 2rem; color: #ff7675;\">❌</div>\n                                <div>Rejected: ${rejectionRate}%</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <p style=\"font-size: 1.1rem; line-height: 1.6;\">${warning}</p>\n                </div>\n                <button class=\"action-btn accept-btn\" onclick=\"filterbubbleGame.complete()\">\n                    Continue to Learning Card <i class=\"fas fa-graduation-cap\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = resultsHtml;\n        \n        // Play completion sound\n        window.playSound('completion');\n    }\n    \n    complete() {\n        const learningContent = `\n            <h3>🫧 Filter Bubble Simulator: Information Diversity Mastery</h3>\n            <div style=\"text-align: left; margin: 1.5rem 0;\">\n                <h4 style=\"color: #2d3436; margin-bottom: 1rem;\">Key Learnings:</h4>\n                <ul style=\"list-style-type: none; padding: 0;\">\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #667eea; margin-right: 0.5rem;\">🫧</span>\n                        <div>\n                            <strong>Filter Bubbles Are Real:</strong> Algorithms create personalized information spaces that can become echo chambers.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #667eea; margin-right: 0.5rem;\">🌐</span>\n                        <div>\n                            <strong>Diversity Matters:</strong> Exposure to different perspectives prevents polarization and promotes understanding.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #667eea; margin-right: 0.5rem;\">🔄</span>\n                        <div>\n                            <strong>Break the Loop:</strong> Actively seek out content that challenges your existing views.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #667eea; margin-right: 0.5rem;\">⚖️</span>\n                        <div>\n                            <strong>Balance is Key:</strong> Accept some challenging content to maintain a healthy information diet.\n                        </div>\n                    </li>\n                </ul>\n                <div style=\"background: #e8f4f8; padding: 1rem; border-radius: 10px; margin-top: 1.5rem;\">\n                    <strong>Your Diversity Score:</strong> ${this.diversityScore}% - ${this.getDiversityAdvice()}\n                </div>\n            </div>\n        `;\n        \n        window.completeGame('filterbubble', learningContent);\n    }\n    \n    getDiversityAdvice() {\n        if (this.diversityScore >= 70) {\n            return \"Excellent! You've maintained a diverse information ecosystem.\";\n        } else if (this.diversityScore >= 40) {\n            return \"Good effort, but try to be more open to challenging perspectives.\";\n        } else {\n            return \"Time to burst your bubble! Actively seek diverse viewpoints.\";\n        }\n    }\n    \n    reset() {\n        this.currentRound = 0;\n        this.diversityScore = 100;\n        this.acceptedCount = 0;\n        this.rejectedCount = 0;\n        this.gameContainer.innerHTML = '';\n    }\n}\n\n// Initialize game instance\nconst filterbubbleGame = new FilterBubbleGame();\n","size_bytes":17407},"js/games/rumorville.js":{"content":"// RumorVille Game - Cartoonish bright town UI for rumor verification\nclass RumorVilleGame {\n    constructor() {\n        this.currentRumorIndex = 0;\n        this.score = 0;\n        this.totalRumors = 0;\n        this.gameContainer = document.getElementById('rumorville-content');\n        this.rumors = [];\n        this.aiIntegration = new AIIntegration();\n    }\n    \n    start() {\n        this.currentRumorIndex = 0;\n        this.score = 0;\n        \n        // Ensure we have access to fallback stories\n        this.rumors = window.FALLBACK_STORIES?.rumorville || [];\n        this.totalRumors = Math.min(5, this.rumors.length); // Play 5 rounds\n        \n        console.log('RumorVille game started with', this.totalRumors, 'rumors');\n        console.log('First rumor sample:', this.rumors[0]);\n        \n        this.showIntroduction();\n        \n        // Play start sound\n        window.playSound('pop');\n    }\n    \n    showIntroduction() {\n        const introHtml = `\n            <div class=\"rumor-container\">\n                <h2 style=\"color: #2d3436; margin-bottom: 2rem;\">\n                    <i class=\"fas fa-home\" style=\"color: #fdcb6e;\"></i>\n                    Welcome to RumorVille!\n                </h2>\n                <div style=\"background: linear-gradient(135deg, #74b9ff, #0984e3); color: white; padding: 2rem; border-radius: 20px; margin-bottom: 2rem;\">\n                    <p style=\"font-size: 1.1rem; line-height: 1.6; margin-bottom: 1rem;\">\n                        🏘️ In this colorful town, rumors spread faster than wildfire! Your job is to be a responsible citizen who thinks before acting.\n                    </p>\n                    <p style=\"font-size: 1rem; margin-bottom: 1rem;\">\n                        <strong>Your Mission:</strong> When you see a rumor, you can:\n                    </p>\n                    <ul style=\"list-style: none; padding: 0;\">\n                        <li style=\"margin: 0.5rem 0;\"><span style=\"color: #ff7675;\">📤 SHARE</span> - Spread it immediately</li>\n                        <li style=\"margin: 0.5rem 0;\"><span style=\"color: #00cec9;\">🔍 VERIFY</span> - Check if it's true first</li>\n                        <li style=\"margin: 0.5rem 0;\"><span style=\"color: #636e72;\">🤐 IGNORE</span> - Don't engage with it</li>\n                    </ul>\n                </div>\n                <button class=\"action-btn verify-btn\" onclick=\"rumorvilleGame.showNextRumor()\">\n                    Let's Start! <i class=\"fas fa-arrow-right\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = introHtml;\n    }\n    \n    showNextRumor() {\n        if (this.currentRumorIndex >= this.totalRumors) {\n            this.showFinalResults();\n            return;\n        }\n        \n        const rumor = this.rumors[this.currentRumorIndex];\n        if (!rumor) {\n            console.error('No rumor found at index', this.currentRumorIndex, 'Total rumors:', this.rumors.length);\n            this.showFinalResults();\n            return;\n        }\n        \n        const rumorHtml = `\n            <div class=\"rumor-container\">\n                <div class=\"game-progress\" style=\"text-align: center; margin-bottom: 2rem; color: #636e72;\">\n                    Rumor ${this.currentRumorIndex + 1} of ${this.totalRumors}\n                </div>\n                \n                <div class=\"rumor-bubble\">\n                    <div class=\"rumor-text\">${rumor.text}</div>\n                </div>\n                \n                <div class=\"town-context\" style=\"background: rgba(116, 185, 255, 0.1); padding: 1rem; border-radius: 15px; margin: 1rem 0; text-align: center;\">\n                    <i class=\"fas fa-users\" style=\"color: #74b9ff;\"></i>\n                    <span style=\"color: #2d3436;\">You see this message in the town square. What do you do?</span>\n                </div>\n                \n                <div class=\"rumor-actions\">\n                    <button class=\"action-btn share-btn\" onclick=\"rumorvilleGame.handleChoice('share')\">\n                        <i class=\"fas fa-share\"></i> Share\n                    </button>\n                    <button class=\"action-btn verify-btn\" onclick=\"rumorvilleGame.handleChoice('verify')\">\n                        <i class=\"fas fa-search\"></i> Verify\n                    </button>\n                    <button class=\"action-btn ignore-btn\" onclick=\"rumorvilleGame.handleChoice('ignore')\">\n                        <i class=\"fas fa-times\"></i> Ignore\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = rumorHtml;\n        \n        // Play whoosh sound\n        window.playSound('whoosh');\n    }\n    \n    async handleChoice(choice) {\n        const rumor = this.rumors[this.currentRumorIndex];\n        \n        // Show loading while processing\n        this.gameContainer.innerHTML += showLoading('Checking the rumor...');\n        \n        let result;\n        try {\n            // Try AI analysis first\n            result = await this.aiIntegration.analyzeFakeNews(rumor.text);\n        } catch (error) {\n            console.log('AI analysis failed, using fallback');\n        }\n        \n        // Use fallback if AI failed\n        if (!result) {\n            result = {\n                isCredible: rumor.isTrue,\n                confidence: 0.85,\n                reasoning: rumor.explanation\n            };\n        }\n        \n        // Determine if the choice was good\n        const isGoodChoice = this.evaluateChoice(choice, result.isCredible);\n        \n        if (isGoodChoice) {\n            this.score++;\n        }\n        \n        this.showRumorResult(choice, result, isGoodChoice);\n    }\n    \n    evaluateChoice(choice, isTrue) {\n        // Good choices:\n        // - Always verify (regardless of truth)\n        // - Ignore false rumors\n        // - Share true rumors (but verify is still better)\n        \n        if (choice === 'verify') {\n            return true; // Always good to verify\n        } else if (choice === 'ignore' && !isTrue) {\n            return true; // Good to ignore false rumors\n        } else if (choice === 'share' && isTrue) {\n            return false; // Even true rumors should be verified first\n        } else {\n            return false; // Sharing false rumors or ignoring true ones\n        }\n    }\n    \n    showRumorResult(choice, result, isGoodChoice) {\n        const rumor = this.rumors[this.currentRumorIndex];\n        \n        let choiceDescription;\n        switch (choice) {\n            case 'share':\n                choiceDescription = isGoodChoice ? \n                    \"You shared this information, but remember - even true information should be verified first!\" :\n                    \"You shared this without checking. This can spread misinformation!\";\n                break;\n            case 'verify':\n                choiceDescription = \"Great choice! You took time to verify before acting. This is responsible digital citizenship!\";\n                break;\n            case 'ignore':\n                choiceDescription = isGoodChoice ? \n                    \"Smart move! You didn't engage with suspicious content.\" :\n                    \"You ignored it, but if it was important true information, others might have benefited from verification.\";\n                break;\n        }\n        \n        const resultTitle = result.isCredible ? \"This rumor was TRUE\" : \"This rumor was FALSE\";\n        \n        const resultHtml = showGameResult(\n            isGoodChoice,\n            resultTitle,\n            `\n                <p><strong>Your Action:</strong> ${choiceDescription}</p>\n                <p><strong>The Truth:</strong> ${result.reasoning || rumor.explanation}</p>\n                <p><strong>Remember:</strong> Always verify information before sharing, even if it seems believable!</p>\n            `,\n            'rumorvilleGame.nextRound()'\n        );\n        \n        this.gameContainer.innerHTML = resultHtml;\n        \n        // Play appropriate sound\n        window.playSound(isGoodChoice ? 'success' : 'error');\n    }\n    \n    nextRound() {\n        this.currentRumorIndex++;\n        this.showNextRumor();\n    }\n    \n    showFinalResults() {\n        const percentage = Math.round((this.score / this.totalRumors) * 100);\n        let performanceLevel;\n        let performanceColor;\n        let advice;\n        \n        if (percentage >= 80) {\n            performanceLevel = \"Digital Detective Master! 🕵️\";\n            performanceColor = \"#27ae60\";\n            advice = \"You're excellent at spotting misinformation and making responsible choices!\";\n        } else if (percentage >= 60) {\n            performanceLevel = \"Good Information Citizen 👍\";\n            performanceColor = \"#f39c12\";\n            advice = \"You're on the right track! Keep practicing verification before sharing.\";\n        } else {\n            performanceLevel = \"Learning in Progress 📚\";\n            performanceColor = \"#e74c3c\";\n            advice = \"Remember: always verify before you share. It's the key to fighting misinformation!\";\n        }\n        \n        const resultsHtml = `\n            <div class=\"final-results\" style=\"text-align: center;\">\n                <div style=\"background: linear-gradient(135deg, #ffeaa7, #fdcb6e); padding: 2rem; border-radius: 20px; margin-bottom: 2rem;\">\n                    <h2 style=\"color: #2d3436; margin-bottom: 1rem;\">\n                        <i class=\"fas fa-flag-checkered\"></i> RumorVille Complete!\n                    </h2>\n                    <div style=\"font-size: 2rem; margin-bottom: 1rem;\">${performanceLevel}</div>\n                    <div style=\"font-size: 1.5rem; color: ${performanceColor}; margin-bottom: 1rem;\">\n                        Score: ${this.score}/${this.totalRumors} (${percentage}%)\n                    </div>\n                    <p style=\"color: #2d3436; font-size: 1.1rem; line-height: 1.6;\">${advice}</p>\n                </div>\n                <button class=\"action-btn verify-btn\" onclick=\"rumorvilleGame.complete()\">\n                    Continue to Learning Card <i class=\"fas fa-graduation-cap\"></i>\n                </button>\n            </div>\n        `;\n        \n        this.gameContainer.innerHTML = resultsHtml;\n        \n        // Play completion sound\n        window.playSound('completion');\n    }\n    \n    complete() {\n        const learningContent = `\n            <h3>🏘️ RumorVille: Information Verification Mastery</h3>\n            <div style=\"text-align: left; margin: 1.5rem 0;\">\n                <h4 style=\"color: #2d3436; margin-bottom: 1rem;\">Key Learnings:</h4>\n                <ul style=\"list-style-type: none; padding: 0;\">\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #27ae60; margin-right: 0.5rem;\">✓</span>\n                        <div>\n                            <strong>Always Verify First:</strong> Even information that seems credible should be fact-checked before sharing.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #27ae60; margin-right: 0.5rem;\">✓</span>\n                        <div>\n                            <strong>Check Multiple Sources:</strong> Look for confirmation from reliable, independent sources.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #27ae60; margin-right: 0.5rem;\">✓</span>\n                        <div>\n                            <strong>Question Emotional Content:</strong> Information designed to make you angry or scared often contains misinformation.\n                        </div>\n                    </li>\n                    <li style=\"margin: 0.8rem 0; display: flex; align-items: flex-start;\">\n                        <span style=\"color: #27ae60; margin-right: 0.5rem;\">✓</span>\n                        <div>\n                            <strong>Break the Chain:</strong> Not sharing is better than sharing false information.\n                        </div>\n                    </li>\n                </ul>\n                <div style=\"background: #e8f4f8; padding: 1rem; border-radius: 10px; margin-top: 1.5rem;\">\n                    <strong>Remember:</strong> You're now a certified RumorVille Digital Detective! Use these skills to build a more informed community.\n                </div>\n            </div>\n        `;\n        \n        window.completeGame('rumorville', learningContent);\n    }\n    \n    reset() {\n        this.currentRumorIndex = 0;\n        this.score = 0;\n        this.gameContainer.innerHTML = '';\n    }\n}\n\n// Initialize game instance\nconst rumorvilleGame = new RumorVilleGame();\n","size_bytes":12879}},"version":1}